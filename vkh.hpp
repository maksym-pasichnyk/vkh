#pragma once

#include <vulkan/vulkan.h>

struct VkQueue_T {
    VkQueue_T() = delete;
    ~VkQueue_T() = delete;

    VKAPI_ATTR auto VKAPI_CALL QueueSubmit(this VkQueue_T& queue, uint32_t submitCount, VkSubmitInfo const* pSubmits, VkFence fence) -> VkResult asm("_vkQueueSubmit");
    VKAPI_ATTR auto VKAPI_CALL QueueWaitIdle(this VkQueue_T& queue) -> VkResult asm("_vkQueueWaitIdle");
    VKAPI_ATTR auto VKAPI_CALL QueueBindSparse(this VkQueue_T& queue, uint32_t bindInfoCount, VkBindSparseInfo const* pBindInfo, VkFence fence) -> VkResult asm("_vkQueueBindSparse");
    VKAPI_ATTR auto VKAPI_CALL QueueSubmit2(this VkQueue_T& queue, uint32_t submitCount, VkSubmitInfo2 const* pSubmits, VkFence fence) -> VkResult asm("_vkQueueSubmit2");
    VKAPI_ATTR auto VKAPI_CALL QueuePresentKHR(this VkQueue_T& queue, VkPresentInfoKHR const* pPresentInfo) -> VkResult asm("_vkQueuePresentKHR");
    VKAPI_ATTR auto VKAPI_CALL QueueSubmit2KHR(this VkQueue_T& queue, uint32_t submitCount, VkSubmitInfo2 const* pSubmits, VkFence fence) -> VkResult asm("_vkQueueSubmit2KHR");
    VKAPI_ATTR void VKAPI_CALL GetQueueCheckpointData2NV(this VkQueue_T& queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData) asm("_vkGetQueueCheckpointData2NV");
    VKAPI_ATTR void VKAPI_CALL QueueBeginDebugUtilsLabelEXT(this VkQueue_T& queue, VkDebugUtilsLabelEXT const* pLabelInfo) asm("_vkQueueBeginDebugUtilsLabelEXT");
    VKAPI_ATTR void VKAPI_CALL QueueEndDebugUtilsLabelEXT(this VkQueue_T& queue) asm("_vkQueueEndDebugUtilsLabelEXT");
    VKAPI_ATTR void VKAPI_CALL QueueInsertDebugUtilsLabelEXT(this VkQueue_T& queue, VkDebugUtilsLabelEXT const* pLabelInfo) asm("_vkQueueInsertDebugUtilsLabelEXT");
    VKAPI_ATTR void VKAPI_CALL GetQueueCheckpointDataNV(this VkQueue_T& queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) asm("_vkGetQueueCheckpointDataNV");
    VKAPI_ATTR auto VKAPI_CALL QueueSetPerformanceConfigurationINTEL(this VkQueue_T& queue, VkPerformanceConfigurationINTEL configuration) -> VkResult asm("_vkQueueSetPerformanceConfigurationINTEL");
    VKAPI_ATTR void VKAPI_CALL QueueNotifyOutOfBandNV(this VkQueue_T& queue, VkOutOfBandQueueTypeInfoNV const* pQueueTypeInfo) asm("_vkQueueNotifyOutOfBandNV");
};
struct VkDevice_T {
    VkDevice_T() = delete;
    ~VkDevice_T() = delete;

    template<typename T = PFN_vkVoidFunction>
    VKAPI_ATTR auto VKAPI_CALL GetDeviceProcAddr(this VkDevice_T& device, char const* pName) -> T asm("_vkGetDeviceProcAddr");

    VKAPI_ATTR void VKAPI_CALL DestroyDevice(this VkDevice_T& device, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDevice");
    VKAPI_ATTR void VKAPI_CALL GetDeviceQueue(this VkDevice_T& device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) asm("_vkGetDeviceQueue");
    VKAPI_ATTR auto VKAPI_CALL DeviceWaitIdle(this VkDevice_T& device) -> VkResult asm("_vkDeviceWaitIdle");
    VKAPI_ATTR auto VKAPI_CALL AllocateMemory(this VkDevice_T& device, VkMemoryAllocateInfo const* pAllocateInfo, VkAllocationCallbacks const* pAllocator, VkDeviceMemory* pMemory) -> VkResult asm("_vkAllocateMemory");
    VKAPI_ATTR void VKAPI_CALL FreeMemory(this VkDevice_T& device, VkDeviceMemory memory, VkAllocationCallbacks const* pAllocator) asm("_vkFreeMemory");
    VKAPI_ATTR auto VKAPI_CALL MapMemory(this VkDevice_T& device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) -> VkResult asm("_vkMapMemory");
    VKAPI_ATTR void VKAPI_CALL UnmapMemory(this VkDevice_T& device, VkDeviceMemory memory) asm("_vkUnmapMemory");
    VKAPI_ATTR auto VKAPI_CALL FlushMappedMemoryRanges(this VkDevice_T& device, uint32_t memoryRangeCount, VkMappedMemoryRange const* pMemoryRanges) -> VkResult asm("_vkFlushMappedMemoryRanges");
    VKAPI_ATTR auto VKAPI_CALL InvalidateMappedMemoryRanges(this VkDevice_T& device, uint32_t memoryRangeCount, VkMappedMemoryRange const* pMemoryRanges) -> VkResult asm("_vkInvalidateMappedMemoryRanges");
    VKAPI_ATTR void VKAPI_CALL GetDeviceMemoryCommitment(this VkDevice_T& device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) asm("_vkGetDeviceMemoryCommitment");
    VKAPI_ATTR auto VKAPI_CALL BindBufferMemory(this VkDevice_T& device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) -> VkResult asm("_vkBindBufferMemory");
    VKAPI_ATTR auto VKAPI_CALL BindImageMemory(this VkDevice_T& device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) -> VkResult asm("_vkBindImageMemory");
    VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements(this VkDevice_T& device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) asm("_vkGetBufferMemoryRequirements");
    VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements(this VkDevice_T& device, VkImage image, VkMemoryRequirements* pMemoryRequirements) asm("_vkGetImageMemoryRequirements");
    VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements(this VkDevice_T& device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) asm("_vkGetImageSparseMemoryRequirements");
    VKAPI_ATTR auto VKAPI_CALL CreateFence(this VkDevice_T& device, VkFenceCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkFence* pFence) -> VkResult asm("_vkCreateFence");
    VKAPI_ATTR void VKAPI_CALL DestroyFence(this VkDevice_T& device, VkFence fence, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyFence");
    VKAPI_ATTR auto VKAPI_CALL ResetFences(this VkDevice_T& device, uint32_t fenceCount, VkFence const* pFences) -> VkResult asm("_vkResetFences");
    VKAPI_ATTR auto VKAPI_CALL GetFenceStatus(this VkDevice_T& device, VkFence fence) -> VkResult asm("_vkGetFenceStatus");
    VKAPI_ATTR auto VKAPI_CALL WaitForFences(this VkDevice_T& device, uint32_t fenceCount, VkFence const* pFences, VkBool32 waitAll, uint64_t timeout) -> VkResult asm("_vkWaitForFences");
    VKAPI_ATTR auto VKAPI_CALL CreateSemaphore(this VkDevice_T& device, VkSemaphoreCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSemaphore* pSemaphore) -> VkResult asm("_vkCreateSemaphore");
    VKAPI_ATTR void VKAPI_CALL DestroySemaphore(this VkDevice_T& device, VkSemaphore semaphore, VkAllocationCallbacks const* pAllocator) asm("_vkDestroySemaphore");
    VKAPI_ATTR auto VKAPI_CALL CreateEvent(this VkDevice_T& device, VkEventCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkEvent* pEvent) -> VkResult asm("_vkCreateEvent");
    VKAPI_ATTR void VKAPI_CALL DestroyEvent(this VkDevice_T& device, VkEvent event, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyEvent");
    VKAPI_ATTR auto VKAPI_CALL GetEventStatus(this VkDevice_T& device, VkEvent event) -> VkResult asm("_vkGetEventStatus");
    VKAPI_ATTR auto VKAPI_CALL SetEvent(this VkDevice_T& device, VkEvent event) -> VkResult asm("_vkSetEvent");
    VKAPI_ATTR auto VKAPI_CALL ResetEvent(this VkDevice_T& device, VkEvent event) -> VkResult asm("_vkResetEvent");
    VKAPI_ATTR auto VKAPI_CALL CreateQueryPool(this VkDevice_T& device, VkQueryPoolCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkQueryPool* pQueryPool) -> VkResult asm("_vkCreateQueryPool");
    VKAPI_ATTR void VKAPI_CALL DestroyQueryPool(this VkDevice_T& device, VkQueryPool queryPool, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyQueryPool");
    VKAPI_ATTR auto VKAPI_CALL GetQueryPoolResults(this VkDevice_T& device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) -> VkResult asm("_vkGetQueryPoolResults");
    VKAPI_ATTR auto VKAPI_CALL CreateBuffer(this VkDevice_T& device, VkBufferCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkBuffer* pBuffer) -> VkResult asm("_vkCreateBuffer");
    VKAPI_ATTR void VKAPI_CALL DestroyBuffer(this VkDevice_T& device, VkBuffer buffer, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyBuffer");
    VKAPI_ATTR auto VKAPI_CALL CreateBufferView(this VkDevice_T& device, VkBufferViewCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkBufferView* pView) -> VkResult asm("_vkCreateBufferView");
    VKAPI_ATTR void VKAPI_CALL DestroyBufferView(this VkDevice_T& device, VkBufferView bufferView, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyBufferView");
    VKAPI_ATTR auto VKAPI_CALL CreateImage(this VkDevice_T& device, VkImageCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkImage* pImage) -> VkResult asm("_vkCreateImage");
    VKAPI_ATTR void VKAPI_CALL DestroyImage(this VkDevice_T& device, VkImage image, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyImage");
    VKAPI_ATTR void VKAPI_CALL GetImageSubresourceLayout(this VkDevice_T& device, VkImage image, VkImageSubresource const* pSubresource, VkSubresourceLayout* pLayout) asm("_vkGetImageSubresourceLayout");
    VKAPI_ATTR auto VKAPI_CALL CreateImageView(this VkDevice_T& device, VkImageViewCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkImageView* pView) -> VkResult asm("_vkCreateImageView");
    VKAPI_ATTR void VKAPI_CALL DestroyImageView(this VkDevice_T& device, VkImageView imageView, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyImageView");
    VKAPI_ATTR auto VKAPI_CALL CreateShaderModule(this VkDevice_T& device, VkShaderModuleCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkShaderModule* pShaderModule) -> VkResult asm("_vkCreateShaderModule");
    VKAPI_ATTR void VKAPI_CALL DestroyShaderModule(this VkDevice_T& device, VkShaderModule shaderModule, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyShaderModule");
    VKAPI_ATTR auto VKAPI_CALL CreatePipelineCache(this VkDevice_T& device, VkPipelineCacheCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkPipelineCache* pPipelineCache) -> VkResult asm("_vkCreatePipelineCache");
    VKAPI_ATTR void VKAPI_CALL DestroyPipelineCache(this VkDevice_T& device, VkPipelineCache pipelineCache, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyPipelineCache");
    VKAPI_ATTR auto VKAPI_CALL GetPipelineCacheData(this VkDevice_T& device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) -> VkResult asm("_vkGetPipelineCacheData");
    VKAPI_ATTR auto VKAPI_CALL MergePipelineCaches(this VkDevice_T& device, VkPipelineCache dstCache, uint32_t srcCacheCount, VkPipelineCache const* pSrcCaches) -> VkResult asm("_vkMergePipelineCaches");
    VKAPI_ATTR auto VKAPI_CALL CreateGraphicsPipelines(this VkDevice_T& device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkGraphicsPipelineCreateInfo const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkPipeline* pPipelines) -> VkResult asm("_vkCreateGraphicsPipelines");
    VKAPI_ATTR auto VKAPI_CALL CreateComputePipelines(this VkDevice_T& device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkComputePipelineCreateInfo const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkPipeline* pPipelines) -> VkResult asm("_vkCreateComputePipelines");
    VKAPI_ATTR void VKAPI_CALL DestroyPipeline(this VkDevice_T& device, VkPipeline pipeline, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyPipeline");
    VKAPI_ATTR auto VKAPI_CALL CreatePipelineLayout(this VkDevice_T& device, VkPipelineLayoutCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkPipelineLayout* pPipelineLayout) -> VkResult asm("_vkCreatePipelineLayout");
    VKAPI_ATTR void VKAPI_CALL DestroyPipelineLayout(this VkDevice_T& device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyPipelineLayout");
    VKAPI_ATTR auto VKAPI_CALL CreateSampler(this VkDevice_T& device, VkSamplerCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSampler* pSampler) -> VkResult asm("_vkCreateSampler");
    VKAPI_ATTR void VKAPI_CALL DestroySampler(this VkDevice_T& device, VkSampler sampler, VkAllocationCallbacks const* pAllocator) asm("_vkDestroySampler");
    VKAPI_ATTR auto VKAPI_CALL CreateDescriptorSetLayout(this VkDevice_T& device, VkDescriptorSetLayoutCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorSetLayout* pSetLayout) -> VkResult asm("_vkCreateDescriptorSetLayout");
    VKAPI_ATTR void VKAPI_CALL DestroyDescriptorSetLayout(this VkDevice_T& device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDescriptorSetLayout");
    VKAPI_ATTR auto VKAPI_CALL CreateDescriptorPool(this VkDevice_T& device, VkDescriptorPoolCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorPool* pDescriptorPool) -> VkResult asm("_vkCreateDescriptorPool");
    VKAPI_ATTR void VKAPI_CALL DestroyDescriptorPool(this VkDevice_T& device, VkDescriptorPool descriptorPool, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDescriptorPool");
    VKAPI_ATTR auto VKAPI_CALL ResetDescriptorPool(this VkDevice_T& device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) -> VkResult asm("_vkResetDescriptorPool");
    VKAPI_ATTR auto VKAPI_CALL AllocateDescriptorSets(this VkDevice_T& device, VkDescriptorSetAllocateInfo const* pAllocateInfo, VkDescriptorSet* pDescriptorSets) -> VkResult asm("_vkAllocateDescriptorSets");
    VKAPI_ATTR auto VKAPI_CALL FreeDescriptorSets(this VkDevice_T& device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets) -> VkResult asm("_vkFreeDescriptorSets");
    VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSets(this VkDevice_T& device, uint32_t descriptorWriteCount, VkWriteDescriptorSet const* pDescriptorWrites, uint32_t descriptorCopyCount, VkCopyDescriptorSet const* pDescriptorCopies) asm("_vkUpdateDescriptorSets");
    VKAPI_ATTR auto VKAPI_CALL CreateFramebuffer(this VkDevice_T& device, VkFramebufferCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkFramebuffer* pFramebuffer) -> VkResult asm("_vkCreateFramebuffer");
    VKAPI_ATTR void VKAPI_CALL DestroyFramebuffer(this VkDevice_T& device, VkFramebuffer framebuffer, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyFramebuffer");
    VKAPI_ATTR auto VKAPI_CALL CreateRenderPass(this VkDevice_T& device, VkRenderPassCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkRenderPass* pRenderPass) -> VkResult asm("_vkCreateRenderPass");
    VKAPI_ATTR void VKAPI_CALL DestroyRenderPass(this VkDevice_T& device, VkRenderPass renderPass, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyRenderPass");
    VKAPI_ATTR void VKAPI_CALL GetRenderAreaGranularity(this VkDevice_T& device, VkRenderPass renderPass, VkExtent2D* pGranularity) asm("_vkGetRenderAreaGranularity");
    VKAPI_ATTR auto VKAPI_CALL CreateCommandPool(this VkDevice_T& device, VkCommandPoolCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkCommandPool* pCommandPool) -> VkResult asm("_vkCreateCommandPool");
    VKAPI_ATTR void VKAPI_CALL DestroyCommandPool(this VkDevice_T& device, VkCommandPool commandPool, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyCommandPool");
    VKAPI_ATTR auto VKAPI_CALL ResetCommandPool(this VkDevice_T& device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) -> VkResult asm("_vkResetCommandPool");
    VKAPI_ATTR auto VKAPI_CALL AllocateCommandBuffers(this VkDevice_T& device, VkCommandBufferAllocateInfo const* pAllocateInfo, VkCommandBuffer* pCommandBuffers) -> VkResult asm("_vkAllocateCommandBuffers");
    VKAPI_ATTR void VKAPI_CALL FreeCommandBuffers(this VkDevice_T& device, VkCommandPool commandPool, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers) asm("_vkFreeCommandBuffers");
    VKAPI_ATTR auto VKAPI_CALL BindBufferMemory2(this VkDevice_T& device, uint32_t bindInfoCount, VkBindBufferMemoryInfo const* pBindInfos) -> VkResult asm("_vkBindBufferMemory2");
    VKAPI_ATTR auto VKAPI_CALL BindImageMemory2(this VkDevice_T& device, uint32_t bindInfoCount, VkBindImageMemoryInfo const* pBindInfos) -> VkResult asm("_vkBindImageMemory2");
    VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPeerMemoryFeatures(this VkDevice_T& device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) asm("_vkGetDeviceGroupPeerMemoryFeatures");
    VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements2(this VkDevice_T& device, VkImageMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetImageMemoryRequirements2");
    VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements2(this VkDevice_T& device, VkBufferMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetBufferMemoryRequirements2");
    VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements2(this VkDevice_T& device, VkImageSparseMemoryRequirementsInfo2 const* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) asm("_vkGetImageSparseMemoryRequirements2");
    VKAPI_ATTR void VKAPI_CALL TrimCommandPool(this VkDevice_T& device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) asm("_vkTrimCommandPool");
    VKAPI_ATTR void VKAPI_CALL GetDeviceQueue2(this VkDevice_T& device, VkDeviceQueueInfo2 const* pQueueInfo, VkQueue* pQueue) asm("_vkGetDeviceQueue2");
    VKAPI_ATTR auto VKAPI_CALL CreateSamplerYcbcrConversion(this VkDevice_T& device, VkSamplerYcbcrConversionCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) -> VkResult asm("_vkCreateSamplerYcbcrConversion");
    VKAPI_ATTR void VKAPI_CALL DestroySamplerYcbcrConversion(this VkDevice_T& device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks const* pAllocator) asm("_vkDestroySamplerYcbcrConversion");
    VKAPI_ATTR auto VKAPI_CALL CreateDescriptorUpdateTemplate(this VkDevice_T& device, VkDescriptorUpdateTemplateCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) -> VkResult asm("_vkCreateDescriptorUpdateTemplate");
    VKAPI_ATTR void VKAPI_CALL DestroyDescriptorUpdateTemplate(this VkDevice_T& device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDescriptorUpdateTemplate");
    VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSetWithTemplate(this VkDevice_T& device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void const* pData) asm("_vkUpdateDescriptorSetWithTemplate");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSupport(this VkDevice_T& device, VkDescriptorSetLayoutCreateInfo const* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) asm("_vkGetDescriptorSetLayoutSupport");
    VKAPI_ATTR auto VKAPI_CALL CreateRenderPass2(this VkDevice_T& device, VkRenderPassCreateInfo2 const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkRenderPass* pRenderPass) -> VkResult asm("_vkCreateRenderPass2");
    VKAPI_ATTR void VKAPI_CALL ResetQueryPool(this VkDevice_T& device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) asm("_vkResetQueryPool");
    VKAPI_ATTR auto VKAPI_CALL GetSemaphoreCounterValue(this VkDevice_T& device, VkSemaphore semaphore, uint64_t* pValue) -> VkResult asm("_vkGetSemaphoreCounterValue");
    VKAPI_ATTR auto VKAPI_CALL WaitSemaphores(this VkDevice_T& device, VkSemaphoreWaitInfo const* pWaitInfo, uint64_t timeout) -> VkResult asm("_vkWaitSemaphores");
    VKAPI_ATTR auto VKAPI_CALL SignalSemaphore(this VkDevice_T& device, VkSemaphoreSignalInfo const* pSignalInfo) -> VkResult asm("_vkSignalSemaphore");
    VKAPI_ATTR auto VKAPI_CALL GetBufferDeviceAddress(this VkDevice_T& device, VkBufferDeviceAddressInfo const* pInfo) -> VkDeviceAddress asm("_vkGetBufferDeviceAddress");
    VKAPI_ATTR auto VKAPI_CALL GetBufferOpaqueCaptureAddress(this VkDevice_T& device, VkBufferDeviceAddressInfo const* pInfo) -> uint64_t asm("_vkGetBufferOpaqueCaptureAddress");
    VKAPI_ATTR auto VKAPI_CALL GetDeviceMemoryOpaqueCaptureAddress(this VkDevice_T& device, VkDeviceMemoryOpaqueCaptureAddressInfo const* pInfo) -> uint64_t asm("_vkGetDeviceMemoryOpaqueCaptureAddress");
    VKAPI_ATTR auto VKAPI_CALL CreatePrivateDataSlot(this VkDevice_T& device, VkPrivateDataSlotCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) -> VkResult asm("_vkCreatePrivateDataSlot");
    VKAPI_ATTR void VKAPI_CALL DestroyPrivateDataSlot(this VkDevice_T& device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyPrivateDataSlot");
    VKAPI_ATTR auto VKAPI_CALL SetPrivateData(this VkDevice_T& device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) -> VkResult asm("_vkSetPrivateData");
    VKAPI_ATTR void VKAPI_CALL GetPrivateData(this VkDevice_T& device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData) asm("_vkGetPrivateData");
    VKAPI_ATTR void VKAPI_CALL GetDeviceBufferMemoryRequirements(this VkDevice_T& device, VkDeviceBufferMemoryRequirements const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetDeviceBufferMemoryRequirements");
    VKAPI_ATTR void VKAPI_CALL GetDeviceImageMemoryRequirements(this VkDevice_T& device, VkDeviceImageMemoryRequirements const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetDeviceImageMemoryRequirements");
    VKAPI_ATTR void VKAPI_CALL GetDeviceImageSparseMemoryRequirements(this VkDevice_T& device, VkDeviceImageMemoryRequirements const* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) asm("_vkGetDeviceImageSparseMemoryRequirements");
    VKAPI_ATTR auto VKAPI_CALL CreateSwapchainKHR(this VkDevice_T& device, VkSwapchainCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSwapchainKHR* pSwapchain) -> VkResult asm("_vkCreateSwapchainKHR");
    VKAPI_ATTR void VKAPI_CALL DestroySwapchainKHR(this VkDevice_T& device, VkSwapchainKHR swapchain, VkAllocationCallbacks const* pAllocator) asm("_vkDestroySwapchainKHR");
    VKAPI_ATTR auto VKAPI_CALL GetSwapchainImagesKHR(this VkDevice_T& device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) -> VkResult asm("_vkGetSwapchainImagesKHR");
    VKAPI_ATTR auto VKAPI_CALL AcquireNextImageKHR(this VkDevice_T& device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) -> VkResult asm("_vkAcquireNextImageKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDeviceGroupPresentCapabilitiesKHR(this VkDevice_T& device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) -> VkResult asm("_vkGetDeviceGroupPresentCapabilitiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDeviceGroupSurfacePresentModesKHR(this VkDevice_T& device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes) -> VkResult asm("_vkGetDeviceGroupSurfacePresentModesKHR");
    VKAPI_ATTR auto VKAPI_CALL AcquireNextImage2KHR(this VkDevice_T& device, VkAcquireNextImageInfoKHR const* pAcquireInfo, uint32_t* pImageIndex) -> VkResult asm("_vkAcquireNextImage2KHR");
    VKAPI_ATTR auto VKAPI_CALL CreateSharedSwapchainsKHR(this VkDevice_T& device, uint32_t swapchainCount, VkSwapchainCreateInfoKHR const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkSwapchainKHR* pSwapchains) -> VkResult asm("_vkCreateSharedSwapchainsKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateVideoSessionKHR(this VkDevice_T& device, VkVideoSessionCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkVideoSessionKHR* pVideoSession) -> VkResult asm("_vkCreateVideoSessionKHR");
    VKAPI_ATTR void VKAPI_CALL DestroyVideoSessionKHR(this VkDevice_T& device, VkVideoSessionKHR videoSession, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyVideoSessionKHR");
    VKAPI_ATTR auto VKAPI_CALL GetVideoSessionMemoryRequirementsKHR(this VkDevice_T& device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements) -> VkResult asm("_vkGetVideoSessionMemoryRequirementsKHR");
    VKAPI_ATTR auto VKAPI_CALL BindVideoSessionMemoryKHR(this VkDevice_T& device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, VkBindVideoSessionMemoryInfoKHR const* pBindSessionMemoryInfos) -> VkResult asm("_vkBindVideoSessionMemoryKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateVideoSessionParametersKHR(this VkDevice_T& device, VkVideoSessionParametersCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters) -> VkResult asm("_vkCreateVideoSessionParametersKHR");
    VKAPI_ATTR auto VKAPI_CALL UpdateVideoSessionParametersKHR(this VkDevice_T& device, VkVideoSessionParametersKHR videoSessionParameters, VkVideoSessionParametersUpdateInfoKHR const* pUpdateInfo) -> VkResult asm("_vkUpdateVideoSessionParametersKHR");
    VKAPI_ATTR void VKAPI_CALL DestroyVideoSessionParametersKHR(this VkDevice_T& device, VkVideoSessionParametersKHR videoSessionParameters, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyVideoSessionParametersKHR");
    VKAPI_ATTR void VKAPI_CALL GetDeviceGroupPeerMemoryFeaturesKHR(this VkDevice_T& device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) asm("_vkGetDeviceGroupPeerMemoryFeaturesKHR");
    VKAPI_ATTR void VKAPI_CALL TrimCommandPoolKHR(this VkDevice_T& device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) asm("_vkTrimCommandPoolKHR");
    VKAPI_ATTR auto VKAPI_CALL GetMemoryFdKHR(this VkDevice_T& device, VkMemoryGetFdInfoKHR const* pGetFdInfo, int* pFd) -> VkResult asm("_vkGetMemoryFdKHR");
    VKAPI_ATTR auto VKAPI_CALL GetMemoryFdPropertiesKHR(this VkDevice_T& device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) -> VkResult asm("_vkGetMemoryFdPropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL ImportSemaphoreFdKHR(this VkDevice_T& device, VkImportSemaphoreFdInfoKHR const* pImportSemaphoreFdInfo) -> VkResult asm("_vkImportSemaphoreFdKHR");
    VKAPI_ATTR auto VKAPI_CALL GetSemaphoreFdKHR(this VkDevice_T& device, VkSemaphoreGetFdInfoKHR const* pGetFdInfo, int* pFd) -> VkResult asm("_vkGetSemaphoreFdKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateDescriptorUpdateTemplateKHR(this VkDevice_T& device, VkDescriptorUpdateTemplateCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) -> VkResult asm("_vkCreateDescriptorUpdateTemplateKHR");
    VKAPI_ATTR void VKAPI_CALL DestroyDescriptorUpdateTemplateKHR(this VkDevice_T& device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDescriptorUpdateTemplateKHR");
    VKAPI_ATTR void VKAPI_CALL UpdateDescriptorSetWithTemplateKHR(this VkDevice_T& device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void const* pData) asm("_vkUpdateDescriptorSetWithTemplateKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateRenderPass2KHR(this VkDevice_T& device, VkRenderPassCreateInfo2 const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkRenderPass* pRenderPass) -> VkResult asm("_vkCreateRenderPass2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetSwapchainStatusKHR(this VkDevice_T& device, VkSwapchainKHR swapchain) -> VkResult asm("_vkGetSwapchainStatusKHR");
    VKAPI_ATTR auto VKAPI_CALL ImportFenceFdKHR(this VkDevice_T& device, VkImportFenceFdInfoKHR const* pImportFenceFdInfo) -> VkResult asm("_vkImportFenceFdKHR");
    VKAPI_ATTR auto VKAPI_CALL GetFenceFdKHR(this VkDevice_T& device, VkFenceGetFdInfoKHR const* pGetFdInfo, int* pFd) -> VkResult asm("_vkGetFenceFdKHR");
    VKAPI_ATTR auto VKAPI_CALL AcquireProfilingLockKHR(this VkDevice_T& device, VkAcquireProfilingLockInfoKHR const* pInfo) -> VkResult asm("_vkAcquireProfilingLockKHR");
    VKAPI_ATTR void VKAPI_CALL ReleaseProfilingLockKHR(this VkDevice_T& device) asm("_vkReleaseProfilingLockKHR");
    VKAPI_ATTR void VKAPI_CALL GetImageMemoryRequirements2KHR(this VkDevice_T& device, VkImageMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetImageMemoryRequirements2KHR");
    VKAPI_ATTR void VKAPI_CALL GetBufferMemoryRequirements2KHR(this VkDevice_T& device, VkBufferMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetBufferMemoryRequirements2KHR");
    VKAPI_ATTR void VKAPI_CALL GetImageSparseMemoryRequirements2KHR(this VkDevice_T& device, VkImageSparseMemoryRequirementsInfo2 const* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) asm("_vkGetImageSparseMemoryRequirements2KHR");
    VKAPI_ATTR auto VKAPI_CALL CreateSamplerYcbcrConversionKHR(this VkDevice_T& device, VkSamplerYcbcrConversionCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) -> VkResult asm("_vkCreateSamplerYcbcrConversionKHR");
    VKAPI_ATTR void VKAPI_CALL DestroySamplerYcbcrConversionKHR(this VkDevice_T& device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks const* pAllocator) asm("_vkDestroySamplerYcbcrConversionKHR");
    VKAPI_ATTR auto VKAPI_CALL BindBufferMemory2KHR(this VkDevice_T& device, uint32_t bindInfoCount, VkBindBufferMemoryInfo const* pBindInfos) -> VkResult asm("_vkBindBufferMemory2KHR");
    VKAPI_ATTR auto VKAPI_CALL BindImageMemory2KHR(this VkDevice_T& device, uint32_t bindInfoCount, VkBindImageMemoryInfo const* pBindInfos) -> VkResult asm("_vkBindImageMemory2KHR");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSupportKHR(this VkDevice_T& device, VkDescriptorSetLayoutCreateInfo const* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) asm("_vkGetDescriptorSetLayoutSupportKHR");
    VKAPI_ATTR auto VKAPI_CALL GetSemaphoreCounterValueKHR(this VkDevice_T& device, VkSemaphore semaphore, uint64_t* pValue) -> VkResult asm("_vkGetSemaphoreCounterValueKHR");
    VKAPI_ATTR auto VKAPI_CALL WaitSemaphoresKHR(this VkDevice_T& device, VkSemaphoreWaitInfo const* pWaitInfo, uint64_t timeout) -> VkResult asm("_vkWaitSemaphoresKHR");
    VKAPI_ATTR auto VKAPI_CALL SignalSemaphoreKHR(this VkDevice_T& device, VkSemaphoreSignalInfo const* pSignalInfo) -> VkResult asm("_vkSignalSemaphoreKHR");
    VKAPI_ATTR auto VKAPI_CALL WaitForPresentKHR(this VkDevice_T& device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout) -> VkResult asm("_vkWaitForPresentKHR");
    VKAPI_ATTR auto VKAPI_CALL GetBufferDeviceAddressKHR(this VkDevice_T& device, VkBufferDeviceAddressInfo const* pInfo) -> VkDeviceAddress asm("_vkGetBufferDeviceAddressKHR");
    VKAPI_ATTR auto VKAPI_CALL GetBufferOpaqueCaptureAddressKHR(this VkDevice_T& device, VkBufferDeviceAddressInfo const* pInfo) -> uint64_t asm("_vkGetBufferOpaqueCaptureAddressKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDeviceMemoryOpaqueCaptureAddressKHR(this VkDevice_T& device, VkDeviceMemoryOpaqueCaptureAddressInfo const* pInfo) -> uint64_t asm("_vkGetDeviceMemoryOpaqueCaptureAddressKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateDeferredOperationKHR(this VkDevice_T& device, VkAllocationCallbacks const* pAllocator, VkDeferredOperationKHR* pDeferredOperation) -> VkResult asm("_vkCreateDeferredOperationKHR");
    VKAPI_ATTR void VKAPI_CALL DestroyDeferredOperationKHR(this VkDevice_T& device, VkDeferredOperationKHR operation, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDeferredOperationKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDeferredOperationMaxConcurrencyKHR(this VkDevice_T& device, VkDeferredOperationKHR operation) -> uint32_t asm("_vkGetDeferredOperationMaxConcurrencyKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDeferredOperationResultKHR(this VkDevice_T& device, VkDeferredOperationKHR operation) -> VkResult asm("_vkGetDeferredOperationResultKHR");
    VKAPI_ATTR auto VKAPI_CALL DeferredOperationJoinKHR(this VkDevice_T& device, VkDeferredOperationKHR operation) -> VkResult asm("_vkDeferredOperationJoinKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPipelineExecutablePropertiesKHR(this VkDevice_T& device, VkPipelineInfoKHR const* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) -> VkResult asm("_vkGetPipelineExecutablePropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPipelineExecutableStatisticsKHR(this VkDevice_T& device, VkPipelineExecutableInfoKHR const* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) -> VkResult asm("_vkGetPipelineExecutableStatisticsKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPipelineExecutableInternalRepresentationsKHR(this VkDevice_T& device, VkPipelineExecutableInfoKHR const* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) -> VkResult asm("_vkGetPipelineExecutableInternalRepresentationsKHR");
    VKAPI_ATTR auto VKAPI_CALL MapMemory2KHR(this VkDevice_T& device, VkMemoryMapInfoKHR const* pMemoryMapInfo, void** ppData) -> VkResult asm("_vkMapMemory2KHR");
    VKAPI_ATTR auto VKAPI_CALL UnmapMemory2KHR(this VkDevice_T& device, VkMemoryUnmapInfoKHR const* pMemoryUnmapInfo) -> VkResult asm("_vkUnmapMemory2KHR");
    VKAPI_ATTR void VKAPI_CALL GetDeviceBufferMemoryRequirementsKHR(this VkDevice_T& device, VkDeviceBufferMemoryRequirements const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetDeviceBufferMemoryRequirementsKHR");
    VKAPI_ATTR void VKAPI_CALL GetDeviceImageMemoryRequirementsKHR(this VkDevice_T& device, VkDeviceImageMemoryRequirements const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetDeviceImageMemoryRequirementsKHR");
    VKAPI_ATTR void VKAPI_CALL GetDeviceImageSparseMemoryRequirementsKHR(this VkDevice_T& device, VkDeviceImageMemoryRequirements const* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) asm("_vkGetDeviceImageSparseMemoryRequirementsKHR");
    VKAPI_ATTR void VKAPI_CALL GetRenderingAreaGranularityKHR(this VkDevice_T& device, VkRenderingAreaInfoKHR const* pRenderingAreaInfo, VkExtent2D* pGranularity) asm("_vkGetRenderingAreaGranularityKHR");
    VKAPI_ATTR void VKAPI_CALL GetDeviceImageSubresourceLayoutKHR(this VkDevice_T& device, VkDeviceImageSubresourceInfoKHR const* pInfo, VkSubresourceLayout2KHR* pLayout) asm("_vkGetDeviceImageSubresourceLayoutKHR");
    VKAPI_ATTR void VKAPI_CALL GetImageSubresourceLayout2KHR(this VkDevice_T& device, VkImage image, VkImageSubresource2KHR const* pSubresource, VkSubresourceLayout2KHR* pLayout) asm("_vkGetImageSubresourceLayout2KHR");
    VKAPI_ATTR auto VKAPI_CALL DebugMarkerSetObjectTagEXT(this VkDevice_T& device, VkDebugMarkerObjectTagInfoEXT const* pTagInfo) -> VkResult asm("_vkDebugMarkerSetObjectTagEXT");
    VKAPI_ATTR auto VKAPI_CALL DebugMarkerSetObjectNameEXT(this VkDevice_T& device, VkDebugMarkerObjectNameInfoEXT const* pNameInfo) -> VkResult asm("_vkDebugMarkerSetObjectNameEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateCuModuleNVX(this VkDevice_T& device, VkCuModuleCreateInfoNVX const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkCuModuleNVX* pModule) -> VkResult asm("_vkCreateCuModuleNVX");
    VKAPI_ATTR auto VKAPI_CALL CreateCuFunctionNVX(this VkDevice_T& device, VkCuFunctionCreateInfoNVX const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkCuFunctionNVX* pFunction) -> VkResult asm("_vkCreateCuFunctionNVX");
    VKAPI_ATTR void VKAPI_CALL DestroyCuModuleNVX(this VkDevice_T& device, VkCuModuleNVX module, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyCuModuleNVX");
    VKAPI_ATTR void VKAPI_CALL DestroyCuFunctionNVX(this VkDevice_T& device, VkCuFunctionNVX function, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyCuFunctionNVX");
    VKAPI_ATTR auto VKAPI_CALL GetImageViewHandleNVX(this VkDevice_T& device, VkImageViewHandleInfoNVX const* pInfo) -> uint32_t asm("_vkGetImageViewHandleNVX");
    VKAPI_ATTR auto VKAPI_CALL GetImageViewAddressNVX(this VkDevice_T& device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties) -> VkResult asm("_vkGetImageViewAddressNVX");
    VKAPI_ATTR auto VKAPI_CALL GetShaderInfoAMD(this VkDevice_T& device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo) -> VkResult asm("_vkGetShaderInfoAMD");
    VKAPI_ATTR auto VKAPI_CALL DisplayPowerControlEXT(this VkDevice_T& device, VkDisplayKHR display, VkDisplayPowerInfoEXT const* pDisplayPowerInfo) -> VkResult asm("_vkDisplayPowerControlEXT");
    VKAPI_ATTR auto VKAPI_CALL RegisterDeviceEventEXT(this VkDevice_T& device, VkDeviceEventInfoEXT const* pDeviceEventInfo, VkAllocationCallbacks const* pAllocator, VkFence* pFence) -> VkResult asm("_vkRegisterDeviceEventEXT");
    VKAPI_ATTR auto VKAPI_CALL RegisterDisplayEventEXT(this VkDevice_T& device, VkDisplayKHR display, VkDisplayEventInfoEXT const* pDisplayEventInfo, VkAllocationCallbacks const* pAllocator, VkFence* pFence) -> VkResult asm("_vkRegisterDisplayEventEXT");
    VKAPI_ATTR auto VKAPI_CALL GetSwapchainCounterEXT(this VkDevice_T& device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue) -> VkResult asm("_vkGetSwapchainCounterEXT");
    VKAPI_ATTR auto VKAPI_CALL GetRefreshCycleDurationGOOGLE(this VkDevice_T& device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) -> VkResult asm("_vkGetRefreshCycleDurationGOOGLE");
    VKAPI_ATTR auto VKAPI_CALL GetPastPresentationTimingGOOGLE(this VkDevice_T& device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) -> VkResult asm("_vkGetPastPresentationTimingGOOGLE");
    VKAPI_ATTR void VKAPI_CALL SetHdrMetadataEXT(this VkDevice_T& device, uint32_t swapchainCount, VkSwapchainKHR const* pSwapchains, VkHdrMetadataEXT const* pMetadata) asm("_vkSetHdrMetadataEXT");
    VKAPI_ATTR auto VKAPI_CALL SetDebugUtilsObjectNameEXT(this VkDevice_T& device, VkDebugUtilsObjectNameInfoEXT const* pNameInfo) -> VkResult asm("_vkSetDebugUtilsObjectNameEXT");
    VKAPI_ATTR auto VKAPI_CALL SetDebugUtilsObjectTagEXT(this VkDevice_T& device, VkDebugUtilsObjectTagInfoEXT const* pTagInfo) -> VkResult asm("_vkSetDebugUtilsObjectTagEXT");
    VKAPI_ATTR auto VKAPI_CALL GetImageDrmFormatModifierPropertiesEXT(this VkDevice_T& device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties) -> VkResult asm("_vkGetImageDrmFormatModifierPropertiesEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateValidationCacheEXT(this VkDevice_T& device, VkValidationCacheCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkValidationCacheEXT* pValidationCache) -> VkResult asm("_vkCreateValidationCacheEXT");
    VKAPI_ATTR void VKAPI_CALL DestroyValidationCacheEXT(this VkDevice_T& device, VkValidationCacheEXT validationCache, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyValidationCacheEXT");
    VKAPI_ATTR auto VKAPI_CALL MergeValidationCachesEXT(this VkDevice_T& device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, VkValidationCacheEXT const* pSrcCaches) -> VkResult asm("_vkMergeValidationCachesEXT");
    VKAPI_ATTR auto VKAPI_CALL GetValidationCacheDataEXT(this VkDevice_T& device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData) -> VkResult asm("_vkGetValidationCacheDataEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateAccelerationStructureNV(this VkDevice_T& device, VkAccelerationStructureCreateInfoNV const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkAccelerationStructureNV* pAccelerationStructure) -> VkResult asm("_vkCreateAccelerationStructureNV");
    VKAPI_ATTR void VKAPI_CALL DestroyAccelerationStructureNV(this VkDevice_T& device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyAccelerationStructureNV");
    VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureMemoryRequirementsNV(this VkDevice_T& device, VkAccelerationStructureMemoryRequirementsInfoNV const* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) asm("_vkGetAccelerationStructureMemoryRequirementsNV");
    VKAPI_ATTR auto VKAPI_CALL BindAccelerationStructureMemoryNV(this VkDevice_T& device, uint32_t bindInfoCount, VkBindAccelerationStructureMemoryInfoNV const* pBindInfos) -> VkResult asm("_vkBindAccelerationStructureMemoryNV");
    VKAPI_ATTR auto VKAPI_CALL CreateRayTracingPipelinesNV(this VkDevice_T& device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkRayTracingPipelineCreateInfoNV const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkPipeline* pPipelines) -> VkResult asm("_vkCreateRayTracingPipelinesNV");
    VKAPI_ATTR auto VKAPI_CALL GetRayTracingShaderGroupHandlesKHR(this VkDevice_T& device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) -> VkResult asm("_vkGetRayTracingShaderGroupHandlesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetRayTracingShaderGroupHandlesNV(this VkDevice_T& device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) -> VkResult asm("_vkGetRayTracingShaderGroupHandlesNV");
    VKAPI_ATTR auto VKAPI_CALL GetAccelerationStructureHandleNV(this VkDevice_T& device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData) -> VkResult asm("_vkGetAccelerationStructureHandleNV");
    VKAPI_ATTR auto VKAPI_CALL CompileDeferredNV(this VkDevice_T& device, VkPipeline pipeline, uint32_t shader) -> VkResult asm("_vkCompileDeferredNV");
    VKAPI_ATTR auto VKAPI_CALL GetMemoryHostPointerPropertiesEXT(this VkDevice_T& device, VkExternalMemoryHandleTypeFlagBits handleType, void const* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) -> VkResult asm("_vkGetMemoryHostPointerPropertiesEXT");
    VKAPI_ATTR auto VKAPI_CALL GetCalibratedTimestampsEXT(this VkDevice_T& device, uint32_t timestampCount, VkCalibratedTimestampInfoEXT const* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) -> VkResult asm("_vkGetCalibratedTimestampsEXT");
    VKAPI_ATTR auto VKAPI_CALL InitializePerformanceApiINTEL(this VkDevice_T& device, VkInitializePerformanceApiInfoINTEL const* pInitializeInfo) -> VkResult asm("_vkInitializePerformanceApiINTEL");
    VKAPI_ATTR void VKAPI_CALL UninitializePerformanceApiINTEL(this VkDevice_T& device) asm("_vkUninitializePerformanceApiINTEL");
    VKAPI_ATTR auto VKAPI_CALL AcquirePerformanceConfigurationINTEL(this VkDevice_T& device, VkPerformanceConfigurationAcquireInfoINTEL const* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration) -> VkResult asm("_vkAcquirePerformanceConfigurationINTEL");
    VKAPI_ATTR auto VKAPI_CALL ReleasePerformanceConfigurationINTEL(this VkDevice_T& device, VkPerformanceConfigurationINTEL configuration) -> VkResult asm("_vkReleasePerformanceConfigurationINTEL");
    VKAPI_ATTR auto VKAPI_CALL GetPerformanceParameterINTEL(this VkDevice_T& device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) -> VkResult asm("_vkGetPerformanceParameterINTEL");
    VKAPI_ATTR void VKAPI_CALL SetLocalDimmingAMD(this VkDevice_T& device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) asm("_vkSetLocalDimmingAMD");
    VKAPI_ATTR auto VKAPI_CALL GetBufferDeviceAddressEXT(this VkDevice_T& device, VkBufferDeviceAddressInfo const* pInfo) -> VkDeviceAddress asm("_vkGetBufferDeviceAddressEXT");
    VKAPI_ATTR void VKAPI_CALL ResetQueryPoolEXT(this VkDevice_T& device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) asm("_vkResetQueryPoolEXT");
    VKAPI_ATTR auto VKAPI_CALL CopyMemoryToImageEXT(this VkDevice_T& device, VkCopyMemoryToImageInfoEXT const* pCopyMemoryToImageInfo) -> VkResult asm("_vkCopyMemoryToImageEXT");
    VKAPI_ATTR auto VKAPI_CALL CopyImageToMemoryEXT(this VkDevice_T& device, VkCopyImageToMemoryInfoEXT const* pCopyImageToMemoryInfo) -> VkResult asm("_vkCopyImageToMemoryEXT");
    VKAPI_ATTR auto VKAPI_CALL CopyImageToImageEXT(this VkDevice_T& device, VkCopyImageToImageInfoEXT const* pCopyImageToImageInfo) -> VkResult asm("_vkCopyImageToImageEXT");
    VKAPI_ATTR auto VKAPI_CALL TransitionImageLayoutEXT(this VkDevice_T& device, uint32_t transitionCount, VkHostImageLayoutTransitionInfoEXT const* pTransitions) -> VkResult asm("_vkTransitionImageLayoutEXT");
    VKAPI_ATTR void VKAPI_CALL GetImageSubresourceLayout2EXT(this VkDevice_T& device, VkImage image, VkImageSubresource2KHR const* pSubresource, VkSubresourceLayout2KHR* pLayout) asm("_vkGetImageSubresourceLayout2EXT");
    VKAPI_ATTR auto VKAPI_CALL ReleaseSwapchainImagesEXT(this VkDevice_T& device, VkReleaseSwapchainImagesInfoEXT const* pReleaseInfo) -> VkResult asm("_vkReleaseSwapchainImagesEXT");
    VKAPI_ATTR void VKAPI_CALL GetGeneratedCommandsMemoryRequirementsNV(this VkDevice_T& device, VkGeneratedCommandsMemoryRequirementsInfoNV const* pInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetGeneratedCommandsMemoryRequirementsNV");
    VKAPI_ATTR auto VKAPI_CALL CreateIndirectCommandsLayoutNV(this VkDevice_T& device, VkIndirectCommandsLayoutCreateInfoNV const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout) -> VkResult asm("_vkCreateIndirectCommandsLayoutNV");
    VKAPI_ATTR void VKAPI_CALL DestroyIndirectCommandsLayoutNV(this VkDevice_T& device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyIndirectCommandsLayoutNV");
    VKAPI_ATTR auto VKAPI_CALL CreatePrivateDataSlotEXT(this VkDevice_T& device, VkPrivateDataSlotCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) -> VkResult asm("_vkCreatePrivateDataSlotEXT");
    VKAPI_ATTR void VKAPI_CALL DestroyPrivateDataSlotEXT(this VkDevice_T& device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyPrivateDataSlotEXT");
    VKAPI_ATTR auto VKAPI_CALL SetPrivateDataEXT(this VkDevice_T& device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) -> VkResult asm("_vkSetPrivateDataEXT");
    VKAPI_ATTR void VKAPI_CALL GetPrivateDataEXT(this VkDevice_T& device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData) asm("_vkGetPrivateDataEXT");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutSizeEXT(this VkDevice_T& device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes) asm("_vkGetDescriptorSetLayoutSizeEXT");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutBindingOffsetEXT(this VkDevice_T& device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset) asm("_vkGetDescriptorSetLayoutBindingOffsetEXT");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorEXT(this VkDevice_T& device, VkDescriptorGetInfoEXT const* pDescriptorInfo, size_t dataSize, void* pDescriptor) asm("_vkGetDescriptorEXT");
    VKAPI_ATTR auto VKAPI_CALL GetBufferOpaqueCaptureDescriptorDataEXT(this VkDevice_T& device, VkBufferCaptureDescriptorDataInfoEXT const* pInfo, void* pData) -> VkResult asm("_vkGetBufferOpaqueCaptureDescriptorDataEXT");
    VKAPI_ATTR auto VKAPI_CALL GetImageOpaqueCaptureDescriptorDataEXT(this VkDevice_T& device, VkImageCaptureDescriptorDataInfoEXT const* pInfo, void* pData) -> VkResult asm("_vkGetImageOpaqueCaptureDescriptorDataEXT");
    VKAPI_ATTR auto VKAPI_CALL GetImageViewOpaqueCaptureDescriptorDataEXT(this VkDevice_T& device, VkImageViewCaptureDescriptorDataInfoEXT const* pInfo, void* pData) -> VkResult asm("_vkGetImageViewOpaqueCaptureDescriptorDataEXT");
    VKAPI_ATTR auto VKAPI_CALL GetSamplerOpaqueCaptureDescriptorDataEXT(this VkDevice_T& device, VkSamplerCaptureDescriptorDataInfoEXT const* pInfo, void* pData) -> VkResult asm("_vkGetSamplerOpaqueCaptureDescriptorDataEXT");
    VKAPI_ATTR auto VKAPI_CALL GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(this VkDevice_T& device, VkAccelerationStructureCaptureDescriptorDataInfoEXT const* pInfo, void* pData) -> VkResult asm("_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
    VKAPI_ATTR auto VKAPI_CALL GetDeviceFaultInfoEXT(this VkDevice_T& device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo) -> VkResult asm("_vkGetDeviceFaultInfoEXT");
    VKAPI_ATTR auto VKAPI_CALL GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(this VkDevice_T& device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize) -> VkResult asm("_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
    VKAPI_ATTR auto VKAPI_CALL GetMemoryRemoteAddressNV(this VkDevice_T& device, VkMemoryGetRemoteAddressInfoNV const* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress) -> VkResult asm("_vkGetMemoryRemoteAddressNV");
    VKAPI_ATTR auto VKAPI_CALL GetPipelinePropertiesEXT(this VkDevice_T& device, VkPipelineInfoEXT const* pPipelineInfo, VkBaseOutStructure* pPipelineProperties) -> VkResult asm("_vkGetPipelinePropertiesEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateMicromapEXT(this VkDevice_T& device, VkMicromapCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkMicromapEXT* pMicromap) -> VkResult asm("_vkCreateMicromapEXT");
    VKAPI_ATTR void VKAPI_CALL DestroyMicromapEXT(this VkDevice_T& device, VkMicromapEXT micromap, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyMicromapEXT");
    VKAPI_ATTR auto VKAPI_CALL BuildMicromapsEXT(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, VkMicromapBuildInfoEXT const* pInfos) -> VkResult asm("_vkBuildMicromapsEXT");
    VKAPI_ATTR auto VKAPI_CALL CopyMicromapEXT(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapInfoEXT const* pInfo) -> VkResult asm("_vkCopyMicromapEXT");
    VKAPI_ATTR auto VKAPI_CALL CopyMicromapToMemoryEXT(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapToMemoryInfoEXT const* pInfo) -> VkResult asm("_vkCopyMicromapToMemoryEXT");
    VKAPI_ATTR auto VKAPI_CALL CopyMemoryToMicromapEXT(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToMicromapInfoEXT const* pInfo) -> VkResult asm("_vkCopyMemoryToMicromapEXT");
    VKAPI_ATTR auto VKAPI_CALL WriteMicromapsPropertiesEXT(this VkDevice_T& device, uint32_t micromapCount, VkMicromapEXT const* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) -> VkResult asm("_vkWriteMicromapsPropertiesEXT");
    VKAPI_ATTR void VKAPI_CALL GetDeviceMicromapCompatibilityEXT(this VkDevice_T& device, VkMicromapVersionInfoEXT const* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) asm("_vkGetDeviceMicromapCompatibilityEXT");
    VKAPI_ATTR void VKAPI_CALL GetMicromapBuildSizesEXT(this VkDevice_T& device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT const* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo) asm("_vkGetMicromapBuildSizesEXT");
    VKAPI_ATTR void VKAPI_CALL SetDeviceMemoryPriorityEXT(this VkDevice_T& device, VkDeviceMemory memory, float priority) asm("_vkSetDeviceMemoryPriorityEXT");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorSetLayoutHostMappingInfoVALVE(this VkDevice_T& device, VkDescriptorSetBindingReferenceVALVE const* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping) asm("_vkGetDescriptorSetLayoutHostMappingInfoVALVE");
    VKAPI_ATTR void VKAPI_CALL GetDescriptorSetHostMappingVALVE(this VkDevice_T& device, VkDescriptorSet descriptorSet, void** ppData) asm("_vkGetDescriptorSetHostMappingVALVE");
    VKAPI_ATTR void VKAPI_CALL GetPipelineIndirectMemoryRequirementsNV(this VkDevice_T& device, VkComputePipelineCreateInfo const* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements) asm("_vkGetPipelineIndirectMemoryRequirementsNV");
    VKAPI_ATTR auto VKAPI_CALL GetPipelineIndirectDeviceAddressNV(this VkDevice_T& device, VkPipelineIndirectDeviceAddressInfoNV const* pInfo) -> VkDeviceAddress asm("_vkGetPipelineIndirectDeviceAddressNV");
    VKAPI_ATTR void VKAPI_CALL GetShaderModuleIdentifierEXT(this VkDevice_T& device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier) asm("_vkGetShaderModuleIdentifierEXT");
    VKAPI_ATTR void VKAPI_CALL GetShaderModuleCreateInfoIdentifierEXT(this VkDevice_T& device, VkShaderModuleCreateInfo const* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier) asm("_vkGetShaderModuleCreateInfoIdentifierEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateOpticalFlowSessionNV(this VkDevice_T& device, VkOpticalFlowSessionCreateInfoNV const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkOpticalFlowSessionNV* pSession) -> VkResult asm("_vkCreateOpticalFlowSessionNV");
    VKAPI_ATTR void VKAPI_CALL DestroyOpticalFlowSessionNV(this VkDevice_T& device, VkOpticalFlowSessionNV session, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyOpticalFlowSessionNV");
    VKAPI_ATTR auto VKAPI_CALL BindOpticalFlowSessionImageNV(this VkDevice_T& device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) -> VkResult asm("_vkBindOpticalFlowSessionImageNV");
    VKAPI_ATTR auto VKAPI_CALL CreateShadersEXT(this VkDevice_T& device, uint32_t createInfoCount, VkShaderCreateInfoEXT const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkShaderEXT* pShaders) -> VkResult asm("_vkCreateShadersEXT");
    VKAPI_ATTR void VKAPI_CALL DestroyShaderEXT(this VkDevice_T& device, VkShaderEXT shader, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyShaderEXT");
    VKAPI_ATTR auto VKAPI_CALL GetShaderBinaryDataEXT(this VkDevice_T& device, VkShaderEXT shader, size_t* pDataSize, void* pData) -> VkResult asm("_vkGetShaderBinaryDataEXT");
    VKAPI_ATTR auto VKAPI_CALL GetFramebufferTilePropertiesQCOM(this VkDevice_T& device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties) -> VkResult asm("_vkGetFramebufferTilePropertiesQCOM");
    VKAPI_ATTR auto VKAPI_CALL GetDynamicRenderingTilePropertiesQCOM(this VkDevice_T& device, VkRenderingInfo const* pRenderingInfo, VkTilePropertiesQCOM* pProperties) -> VkResult asm("_vkGetDynamicRenderingTilePropertiesQCOM");
    VKAPI_ATTR auto VKAPI_CALL SetLatencySleepModeNV(this VkDevice_T& device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV const* pSleepModeInfo) -> VkResult asm("_vkSetLatencySleepModeNV");
    VKAPI_ATTR auto VKAPI_CALL LatencySleepNV(this VkDevice_T& device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV const* pSleepInfo) -> VkResult asm("_vkLatencySleepNV");
    VKAPI_ATTR void VKAPI_CALL SetLatencyMarkerNV(this VkDevice_T& device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV const* pLatencyMarkerInfo) asm("_vkSetLatencyMarkerNV");
    VKAPI_ATTR void VKAPI_CALL GetLatencyTimingsNV(this VkDevice_T& device, VkSwapchainKHR swapchain, uint32_t* pTimingCount, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo) asm("_vkGetLatencyTimingsNV");
    VKAPI_ATTR auto VKAPI_CALL CreateAccelerationStructureKHR(this VkDevice_T& device, VkAccelerationStructureCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure) -> VkResult asm("_vkCreateAccelerationStructureKHR");
    VKAPI_ATTR void VKAPI_CALL DestroyAccelerationStructureKHR(this VkDevice_T& device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyAccelerationStructureKHR");
    VKAPI_ATTR auto VKAPI_CALL BuildAccelerationStructuresKHR(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR const* pInfos, VkAccelerationStructureBuildRangeInfoKHR const* const* ppBuildRangeInfos) -> VkResult asm("_vkBuildAccelerationStructuresKHR");
    VKAPI_ATTR auto VKAPI_CALL CopyAccelerationStructureKHR(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR const* pInfo) -> VkResult asm("_vkCopyAccelerationStructureKHR");
    VKAPI_ATTR auto VKAPI_CALL CopyAccelerationStructureToMemoryKHR(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR const* pInfo) -> VkResult asm("_vkCopyAccelerationStructureToMemoryKHR");
    VKAPI_ATTR auto VKAPI_CALL CopyMemoryToAccelerationStructureKHR(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR const* pInfo) -> VkResult asm("_vkCopyMemoryToAccelerationStructureKHR");
    VKAPI_ATTR auto VKAPI_CALL WriteAccelerationStructuresPropertiesKHR(this VkDevice_T& device, uint32_t accelerationStructureCount, VkAccelerationStructureKHR const* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) -> VkResult asm("_vkWriteAccelerationStructuresPropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetAccelerationStructureDeviceAddressKHR(this VkDevice_T& device, VkAccelerationStructureDeviceAddressInfoKHR const* pInfo) -> VkDeviceAddress asm("_vkGetAccelerationStructureDeviceAddressKHR");
    VKAPI_ATTR void VKAPI_CALL GetDeviceAccelerationStructureCompatibilityKHR(this VkDevice_T& device, VkAccelerationStructureVersionInfoKHR const* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) asm("_vkGetDeviceAccelerationStructureCompatibilityKHR");
    VKAPI_ATTR void VKAPI_CALL GetAccelerationStructureBuildSizesKHR(this VkDevice_T& device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR const* pBuildInfo, uint32_t const* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) asm("_vkGetAccelerationStructureBuildSizesKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateRayTracingPipelinesKHR(this VkDevice_T& device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkRayTracingPipelineCreateInfoKHR const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkPipeline* pPipelines) -> VkResult asm("_vkCreateRayTracingPipelinesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetRayTracingCaptureReplayShaderGroupHandlesKHR(this VkDevice_T& device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) -> VkResult asm("_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetRayTracingShaderGroupStackSizeKHR(this VkDevice_T& device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader) -> VkDeviceSize asm("_vkGetRayTracingShaderGroupStackSizeKHR");
};
struct VkInstance_T {
    VkInstance_T() = delete;
    ~VkInstance_T() = delete;

    template<typename T = PFN_vkVoidFunction>
    VKAPI_ATTR auto VKAPI_CALL GetInstanceProcAddr(this VkInstance_T& instance, char const* name) -> T asm("_vkGetInstanceProcAddr");

    VKAPI_ATTR void VKAPI_CALL DestroyInstance(this VkInstance_T& instance, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyInstance");
    VKAPI_ATTR auto VKAPI_CALL EnumeratePhysicalDevices(this VkInstance_T& instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) -> VkResult asm("_vkEnumeratePhysicalDevices");
    VKAPI_ATTR auto VKAPI_CALL EnumeratePhysicalDeviceGroups(this VkInstance_T& instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) -> VkResult asm("_vkEnumeratePhysicalDeviceGroups");
    VKAPI_ATTR void VKAPI_CALL DestroySurfaceKHR(this VkInstance_T& instance, VkSurfaceKHR surface, VkAllocationCallbacks const* pAllocator) asm("_vkDestroySurfaceKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateDisplayPlaneSurfaceKHR(this VkInstance_T& instance, VkDisplaySurfaceCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSurfaceKHR* pSurface) -> VkResult asm("_vkCreateDisplayPlaneSurfaceKHR");
    VKAPI_ATTR auto VKAPI_CALL EnumeratePhysicalDeviceGroupsKHR(this VkInstance_T& instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) -> VkResult asm("_vkEnumeratePhysicalDeviceGroupsKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateDebugReportCallbackEXT(this VkInstance_T& instance, VkDebugReportCallbackCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDebugReportCallbackEXT* pCallback) -> VkResult asm("_vkCreateDebugReportCallbackEXT");
    VKAPI_ATTR void VKAPI_CALL DestroyDebugReportCallbackEXT(this VkInstance_T& instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDebugReportCallbackEXT");
    VKAPI_ATTR void VKAPI_CALL DebugReportMessageEXT(this VkInstance_T& instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, char const* pLayerPrefix, char const* pMessage) asm("_vkDebugReportMessageEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateDebugUtilsMessengerEXT(this VkInstance_T& instance, VkDebugUtilsMessengerCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDebugUtilsMessengerEXT* pMessenger) -> VkResult asm("_vkCreateDebugUtilsMessengerEXT");
    VKAPI_ATTR void VKAPI_CALL DestroyDebugUtilsMessengerEXT(this VkInstance_T& instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks const* pAllocator) asm("_vkDestroyDebugUtilsMessengerEXT");
    VKAPI_ATTR void VKAPI_CALL SubmitDebugUtilsMessageEXT(this VkInstance_T& instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT const* pCallbackData) asm("_vkSubmitDebugUtilsMessageEXT");
    VKAPI_ATTR auto VKAPI_CALL CreateHeadlessSurfaceEXT(this VkInstance_T& instance, VkHeadlessSurfaceCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSurfaceKHR* pSurface) -> VkResult asm("_vkCreateHeadlessSurfaceEXT");
};
struct VkCommandBuffer_T {
    VkCommandBuffer_T() = delete;
    ~VkCommandBuffer_T() = delete;

    VKAPI_ATTR auto VKAPI_CALL BeginCommandBuffer(this VkCommandBuffer_T& commandBuffer, VkCommandBufferBeginInfo const* pBeginInfo) -> VkResult asm("_vkBeginCommandBuffer");
    VKAPI_ATTR auto VKAPI_CALL EndCommandBuffer(this VkCommandBuffer_T& commandBuffer) -> VkResult asm("_vkEndCommandBuffer");
    VKAPI_ATTR auto VKAPI_CALL ResetCommandBuffer(this VkCommandBuffer_T& commandBuffer, VkCommandBufferResetFlags flags) -> VkResult asm("_vkResetCommandBuffer");
    VKAPI_ATTR void VKAPI_CALL BindPipeline(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipeline pipeline) asm("_vkCmdBindPipeline");
    VKAPI_ATTR void VKAPI_CALL SetViewport(this VkCommandBuffer_T& commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports) asm("_vkCmdSetViewport");
    VKAPI_ATTR void VKAPI_CALL SetScissor(this VkCommandBuffer_T& commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors) asm("_vkCmdSetScissor");
    VKAPI_ATTR void VKAPI_CALL SetLineWidth(this VkCommandBuffer_T& commandBuffer, float lineWidth) asm("_vkCmdSetLineWidth");
    VKAPI_ATTR void VKAPI_CALL SetDepthBias(this VkCommandBuffer_T& commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) asm("_vkCmdSetDepthBias");
    VKAPI_ATTR void VKAPI_CALL SetDepthBounds(this VkCommandBuffer_T& commandBuffer, float minDepthBounds, float maxDepthBounds) asm("_vkCmdSetDepthBounds");
    VKAPI_ATTR void VKAPI_CALL SetStencilCompareMask(this VkCommandBuffer_T& commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) asm("_vkCmdSetStencilCompareMask");
    VKAPI_ATTR void VKAPI_CALL SetStencilWriteMask(this VkCommandBuffer_T& commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) asm("_vkCmdSetStencilWriteMask");
    VKAPI_ATTR void VKAPI_CALL SetStencilReference(this VkCommandBuffer_T& commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) asm("_vkCmdSetStencilReference");
    VKAPI_ATTR void VKAPI_CALL BindDescriptorSets(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets) asm("_vkCmdBindDescriptorSets");
    VKAPI_ATTR void VKAPI_CALL BindIndexBuffer(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) asm("_vkCmdBindIndexBuffer");
    VKAPI_ATTR void VKAPI_CALL BindVertexBuffers(this VkCommandBuffer_T& commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets) asm("_vkCmdBindVertexBuffers");
    VKAPI_ATTR void VKAPI_CALL Draw(this VkCommandBuffer_T& commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) asm("_vkCmdDraw");
    VKAPI_ATTR void VKAPI_CALL DrawIndexed(this VkCommandBuffer_T& commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) asm("_vkCmdDrawIndexed");
    VKAPI_ATTR void VKAPI_CALL DrawIndirect(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) asm("_vkCmdDrawIndirect");
    VKAPI_ATTR void VKAPI_CALL DrawIndexedIndirect(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) asm("_vkCmdDrawIndexedIndirect");
    VKAPI_ATTR void VKAPI_CALL Dispatch(this VkCommandBuffer_T& commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) asm("_vkCmdDispatch");
    VKAPI_ATTR void VKAPI_CALL DispatchIndirect(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset) asm("_vkCmdDispatchIndirect");
    VKAPI_ATTR void VKAPI_CALL CopyBuffer(this VkCommandBuffer_T& commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions) asm("_vkCmdCopyBuffer");
    VKAPI_ATTR void VKAPI_CALL CopyImage(this VkCommandBuffer_T& commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions) asm("_vkCmdCopyImage");
    VKAPI_ATTR void VKAPI_CALL BlitImage(this VkCommandBuffer_T& commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter) asm("_vkCmdBlitImage");
    VKAPI_ATTR void VKAPI_CALL CopyBufferToImage(this VkCommandBuffer_T& commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions) asm("_vkCmdCopyBufferToImage");
    VKAPI_ATTR void VKAPI_CALL CopyImageToBuffer(this VkCommandBuffer_T& commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions) asm("_vkCmdCopyImageToBuffer");
    VKAPI_ATTR void VKAPI_CALL UpdateBuffer(this VkCommandBuffer_T& commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData) asm("_vkCmdUpdateBuffer");
    VKAPI_ATTR void VKAPI_CALL FillBuffer(this VkCommandBuffer_T& commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) asm("_vkCmdFillBuffer");
    VKAPI_ATTR void VKAPI_CALL ClearColorImage(this VkCommandBuffer_T& commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges) asm("_vkCmdClearColorImage");
    VKAPI_ATTR void VKAPI_CALL ClearDepthStencilImage(this VkCommandBuffer_T& commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges) asm("_vkCmdClearDepthStencilImage");
    VKAPI_ATTR void VKAPI_CALL ClearAttachments(this VkCommandBuffer_T& commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects) asm("_vkCmdClearAttachments");
    VKAPI_ATTR void VKAPI_CALL ResolveImage(this VkCommandBuffer_T& commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions) asm("_vkCmdResolveImage");
    VKAPI_ATTR void VKAPI_CALL SetEvent(this VkCommandBuffer_T& commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) asm("_vkCmdSetEvent");
    VKAPI_ATTR void VKAPI_CALL ResetEvent(this VkCommandBuffer_T& commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) asm("_vkCmdResetEvent");
    VKAPI_ATTR void VKAPI_CALL WaitEvents(this VkCommandBuffer_T& commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers) asm("_vkCmdWaitEvents");
    VKAPI_ATTR void VKAPI_CALL PipelineBarrier(this VkCommandBuffer_T& commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers) asm("_vkCmdPipelineBarrier");
    VKAPI_ATTR void VKAPI_CALL BeginQuery(this VkCommandBuffer_T& commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) asm("_vkCmdBeginQuery");
    VKAPI_ATTR void VKAPI_CALL EndQuery(this VkCommandBuffer_T& commandBuffer, VkQueryPool queryPool, uint32_t query) asm("_vkCmdEndQuery");
    VKAPI_ATTR void VKAPI_CALL ResetQueryPool(this VkCommandBuffer_T& commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) asm("_vkCmdResetQueryPool");
    VKAPI_ATTR void VKAPI_CALL WriteTimestamp(this VkCommandBuffer_T& commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) asm("_vkCmdWriteTimestamp");
    VKAPI_ATTR void VKAPI_CALL CopyQueryPoolResults(this VkCommandBuffer_T& commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) asm("_vkCmdCopyQueryPoolResults");
    VKAPI_ATTR void VKAPI_CALL PushConstants(this VkCommandBuffer_T& commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues) asm("_vkCmdPushConstants");
    VKAPI_ATTR void VKAPI_CALL BeginRenderPass(this VkCommandBuffer_T& commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents) asm("_vkCmdBeginRenderPass");
    VKAPI_ATTR void VKAPI_CALL NextSubpass(this VkCommandBuffer_T& commandBuffer, VkSubpassContents contents) asm("_vkCmdNextSubpass");
    VKAPI_ATTR void VKAPI_CALL EndRenderPass(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdEndRenderPass");
    VKAPI_ATTR void VKAPI_CALL ExecuteCommands(this VkCommandBuffer_T& commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers) asm("_vkCmdExecuteCommands");
    VKAPI_ATTR void VKAPI_CALL SetDeviceMask(this VkCommandBuffer_T& commandBuffer, uint32_t deviceMask) asm("_vkCmdSetDeviceMask");
    VKAPI_ATTR void VKAPI_CALL DispatchBase(this VkCommandBuffer_T& commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) asm("_vkCmdDispatchBase");
    VKAPI_ATTR void VKAPI_CALL DrawIndirectCount(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawIndirectCount");
    VKAPI_ATTR void VKAPI_CALL DrawIndexedIndirectCount(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawIndexedIndirectCount");
    VKAPI_ATTR void VKAPI_CALL BeginRenderPass2(this VkCommandBuffer_T& commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassBeginInfo const* pSubpassBeginInfo) asm("_vkCmdBeginRenderPass2");
    VKAPI_ATTR void VKAPI_CALL NextSubpass2(this VkCommandBuffer_T& commandBuffer, VkSubpassBeginInfo const* pSubpassBeginInfo, VkSubpassEndInfo const* pSubpassEndInfo) asm("_vkCmdNextSubpass2");
    VKAPI_ATTR void VKAPI_CALL EndRenderPass2(this VkCommandBuffer_T& commandBuffer, VkSubpassEndInfo const* pSubpassEndInfo) asm("_vkCmdEndRenderPass2");
    VKAPI_ATTR void VKAPI_CALL SetEvent2(this VkCommandBuffer_T& commandBuffer, VkEvent event, VkDependencyInfo const* pDependencyInfo) asm("_vkCmdSetEvent2");
    VKAPI_ATTR void VKAPI_CALL ResetEvent2(this VkCommandBuffer_T& commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) asm("_vkCmdResetEvent2");
    VKAPI_ATTR void VKAPI_CALL WaitEvents2(this VkCommandBuffer_T& commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkDependencyInfo const* pDependencyInfos) asm("_vkCmdWaitEvents2");
    VKAPI_ATTR void VKAPI_CALL PipelineBarrier2(this VkCommandBuffer_T& commandBuffer, VkDependencyInfo const* pDependencyInfo) asm("_vkCmdPipelineBarrier2");
    VKAPI_ATTR void VKAPI_CALL WriteTimestamp2(this VkCommandBuffer_T& commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) asm("_vkCmdWriteTimestamp2");
    VKAPI_ATTR void VKAPI_CALL CopyBuffer2(this VkCommandBuffer_T& commandBuffer, VkCopyBufferInfo2 const* pCopyBufferInfo) asm("_vkCmdCopyBuffer2");
    VKAPI_ATTR void VKAPI_CALL CopyImage2(this VkCommandBuffer_T& commandBuffer, VkCopyImageInfo2 const* pCopyImageInfo) asm("_vkCmdCopyImage2");
    VKAPI_ATTR void VKAPI_CALL CopyBufferToImage2(this VkCommandBuffer_T& commandBuffer, VkCopyBufferToImageInfo2 const* pCopyBufferToImageInfo) asm("_vkCmdCopyBufferToImage2");
    VKAPI_ATTR void VKAPI_CALL CopyImageToBuffer2(this VkCommandBuffer_T& commandBuffer, VkCopyImageToBufferInfo2 const* pCopyImageToBufferInfo) asm("_vkCmdCopyImageToBuffer2");
    VKAPI_ATTR void VKAPI_CALL BlitImage2(this VkCommandBuffer_T& commandBuffer, VkBlitImageInfo2 const* pBlitImageInfo) asm("_vkCmdBlitImage2");
    VKAPI_ATTR void VKAPI_CALL ResolveImage2(this VkCommandBuffer_T& commandBuffer, VkResolveImageInfo2 const* pResolveImageInfo) asm("_vkCmdResolveImage2");
    VKAPI_ATTR void VKAPI_CALL BeginRendering(this VkCommandBuffer_T& commandBuffer, VkRenderingInfo const* pRenderingInfo) asm("_vkCmdBeginRendering");
    VKAPI_ATTR void VKAPI_CALL EndRendering(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdEndRendering");
    VKAPI_ATTR void VKAPI_CALL SetCullMode(this VkCommandBuffer_T& commandBuffer, VkCullModeFlags cullMode) asm("_vkCmdSetCullMode");
    VKAPI_ATTR void VKAPI_CALL SetFrontFace(this VkCommandBuffer_T& commandBuffer, VkFrontFace frontFace) asm("_vkCmdSetFrontFace");
    VKAPI_ATTR void VKAPI_CALL SetPrimitiveTopology(this VkCommandBuffer_T& commandBuffer, VkPrimitiveTopology primitiveTopology) asm("_vkCmdSetPrimitiveTopology");
    VKAPI_ATTR void VKAPI_CALL SetViewportWithCount(this VkCommandBuffer_T& commandBuffer, uint32_t viewportCount, VkViewport const* pViewports) asm("_vkCmdSetViewportWithCount");
    VKAPI_ATTR void VKAPI_CALL SetScissorWithCount(this VkCommandBuffer_T& commandBuffer, uint32_t scissorCount, VkRect2D const* pScissors) asm("_vkCmdSetScissorWithCount");
    VKAPI_ATTR void VKAPI_CALL BindVertexBuffers2(this VkCommandBuffer_T& commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets, VkDeviceSize const* pSizes, VkDeviceSize const* pStrides) asm("_vkCmdBindVertexBuffers2");
    VKAPI_ATTR void VKAPI_CALL SetDepthTestEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 depthTestEnable) asm("_vkCmdSetDepthTestEnable");
    VKAPI_ATTR void VKAPI_CALL SetDepthWriteEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 depthWriteEnable) asm("_vkCmdSetDepthWriteEnable");
    VKAPI_ATTR void VKAPI_CALL SetDepthCompareOp(this VkCommandBuffer_T& commandBuffer, VkCompareOp depthCompareOp) asm("_vkCmdSetDepthCompareOp");
    VKAPI_ATTR void VKAPI_CALL SetDepthBoundsTestEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 depthBoundsTestEnable) asm("_vkCmdSetDepthBoundsTestEnable");
    VKAPI_ATTR void VKAPI_CALL SetStencilTestEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 stencilTestEnable) asm("_vkCmdSetStencilTestEnable");
    VKAPI_ATTR void VKAPI_CALL SetStencilOp(this VkCommandBuffer_T& commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) asm("_vkCmdSetStencilOp");
    VKAPI_ATTR void VKAPI_CALL SetRasterizerDiscardEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 rasterizerDiscardEnable) asm("_vkCmdSetRasterizerDiscardEnable");
    VKAPI_ATTR void VKAPI_CALL SetDepthBiasEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 depthBiasEnable) asm("_vkCmdSetDepthBiasEnable");
    VKAPI_ATTR void VKAPI_CALL SetPrimitiveRestartEnable(this VkCommandBuffer_T& commandBuffer, VkBool32 primitiveRestartEnable) asm("_vkCmdSetPrimitiveRestartEnable");
    VKAPI_ATTR void VKAPI_CALL BeginVideoCodingKHR(this VkCommandBuffer_T& commandBuffer, VkVideoBeginCodingInfoKHR const* pBeginInfo) asm("_vkCmdBeginVideoCodingKHR");
    VKAPI_ATTR void VKAPI_CALL EndVideoCodingKHR(this VkCommandBuffer_T& commandBuffer, VkVideoEndCodingInfoKHR const* pEndCodingInfo) asm("_vkCmdEndVideoCodingKHR");
    VKAPI_ATTR void VKAPI_CALL ControlVideoCodingKHR(this VkCommandBuffer_T& commandBuffer, VkVideoCodingControlInfoKHR const* pCodingControlInfo) asm("_vkCmdControlVideoCodingKHR");
    VKAPI_ATTR void VKAPI_CALL DecodeVideoKHR(this VkCommandBuffer_T& commandBuffer, VkVideoDecodeInfoKHR const* pDecodeInfo) asm("_vkCmdDecodeVideoKHR");
    VKAPI_ATTR void VKAPI_CALL BeginRenderingKHR(this VkCommandBuffer_T& commandBuffer, VkRenderingInfo const* pRenderingInfo) asm("_vkCmdBeginRenderingKHR");
    VKAPI_ATTR void VKAPI_CALL EndRenderingKHR(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdEndRenderingKHR");
    VKAPI_ATTR void VKAPI_CALL SetDeviceMaskKHR(this VkCommandBuffer_T& commandBuffer, uint32_t deviceMask) asm("_vkCmdSetDeviceMaskKHR");
    VKAPI_ATTR void VKAPI_CALL DispatchBaseKHR(this VkCommandBuffer_T& commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) asm("_vkCmdDispatchBaseKHR");
    VKAPI_ATTR void VKAPI_CALL PushDescriptorSetKHR(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, VkWriteDescriptorSet const* pDescriptorWrites) asm("_vkCmdPushDescriptorSetKHR");
    VKAPI_ATTR void VKAPI_CALL PushDescriptorSetWithTemplateKHR(this VkCommandBuffer_T& commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, void const* pData) asm("_vkCmdPushDescriptorSetWithTemplateKHR");
    VKAPI_ATTR void VKAPI_CALL BeginRenderPass2KHR(this VkCommandBuffer_T& commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassBeginInfo const* pSubpassBeginInfo) asm("_vkCmdBeginRenderPass2KHR");
    VKAPI_ATTR void VKAPI_CALL NextSubpass2KHR(this VkCommandBuffer_T& commandBuffer, VkSubpassBeginInfo const* pSubpassBeginInfo, VkSubpassEndInfo const* pSubpassEndInfo) asm("_vkCmdNextSubpass2KHR");
    VKAPI_ATTR void VKAPI_CALL EndRenderPass2KHR(this VkCommandBuffer_T& commandBuffer, VkSubpassEndInfo const* pSubpassEndInfo) asm("_vkCmdEndRenderPass2KHR");
    VKAPI_ATTR void VKAPI_CALL DrawIndirectCountKHR(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawIndirectCountKHR");
    VKAPI_ATTR void VKAPI_CALL DrawIndexedIndirectCountKHR(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawIndexedIndirectCountKHR");
    VKAPI_ATTR void VKAPI_CALL SetEvent2KHR(this VkCommandBuffer_T& commandBuffer, VkEvent event, VkDependencyInfo const* pDependencyInfo) asm("_vkCmdSetEvent2KHR");
    VKAPI_ATTR void VKAPI_CALL ResetEvent2KHR(this VkCommandBuffer_T& commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) asm("_vkCmdResetEvent2KHR");
    VKAPI_ATTR void VKAPI_CALL WaitEvents2KHR(this VkCommandBuffer_T& commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkDependencyInfo const* pDependencyInfos) asm("_vkCmdWaitEvents2KHR");
    VKAPI_ATTR void VKAPI_CALL PipelineBarrier2KHR(this VkCommandBuffer_T& commandBuffer, VkDependencyInfo const* pDependencyInfo) asm("_vkCmdPipelineBarrier2KHR");
    VKAPI_ATTR void VKAPI_CALL WriteTimestamp2KHR(this VkCommandBuffer_T& commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) asm("_vkCmdWriteTimestamp2KHR");
    VKAPI_ATTR void VKAPI_CALL WriteBufferMarker2AMD(this VkCommandBuffer_T& commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) asm("_vkCmdWriteBufferMarker2AMD");
    VKAPI_ATTR void VKAPI_CALL CopyBuffer2KHR(this VkCommandBuffer_T& commandBuffer, VkCopyBufferInfo2 const* pCopyBufferInfo) asm("_vkCmdCopyBuffer2KHR");
    VKAPI_ATTR void VKAPI_CALL CopyImage2KHR(this VkCommandBuffer_T& commandBuffer, VkCopyImageInfo2 const* pCopyImageInfo) asm("_vkCmdCopyImage2KHR");
    VKAPI_ATTR void VKAPI_CALL CopyBufferToImage2KHR(this VkCommandBuffer_T& commandBuffer, VkCopyBufferToImageInfo2 const* pCopyBufferToImageInfo) asm("_vkCmdCopyBufferToImage2KHR");
    VKAPI_ATTR void VKAPI_CALL CopyImageToBuffer2KHR(this VkCommandBuffer_T& commandBuffer, VkCopyImageToBufferInfo2 const* pCopyImageToBufferInfo) asm("_vkCmdCopyImageToBuffer2KHR");
    VKAPI_ATTR void VKAPI_CALL BlitImage2KHR(this VkCommandBuffer_T& commandBuffer, VkBlitImageInfo2 const* pBlitImageInfo) asm("_vkCmdBlitImage2KHR");
    VKAPI_ATTR void VKAPI_CALL ResolveImage2KHR(this VkCommandBuffer_T& commandBuffer, VkResolveImageInfo2 const* pResolveImageInfo) asm("_vkCmdResolveImage2KHR");
    VKAPI_ATTR void VKAPI_CALL TraceRaysIndirect2KHR(this VkCommandBuffer_T& commandBuffer, VkDeviceAddress indirectDeviceAddress) asm("_vkCmdTraceRaysIndirect2KHR");
    VKAPI_ATTR void VKAPI_CALL BindIndexBuffer2KHR(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) asm("_vkCmdBindIndexBuffer2KHR");
    VKAPI_ATTR void VKAPI_CALL DebugMarkerBeginEXT(this VkCommandBuffer_T& commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo) asm("_vkCmdDebugMarkerBeginEXT");
    VKAPI_ATTR void VKAPI_CALL DebugMarkerEndEXT(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdDebugMarkerEndEXT");
    VKAPI_ATTR void VKAPI_CALL DebugMarkerInsertEXT(this VkCommandBuffer_T& commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo) asm("_vkCmdDebugMarkerInsertEXT");
    VKAPI_ATTR void VKAPI_CALL BindTransformFeedbackBuffersEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets, VkDeviceSize const* pSizes) asm("_vkCmdBindTransformFeedbackBuffersEXT");
    VKAPI_ATTR void VKAPI_CALL BeginTransformFeedbackEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, VkBuffer const* pCounterBuffers, VkDeviceSize const* pCounterBufferOffsets) asm("_vkCmdBeginTransformFeedbackEXT");
    VKAPI_ATTR void VKAPI_CALL EndTransformFeedbackEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, VkBuffer const* pCounterBuffers, VkDeviceSize const* pCounterBufferOffsets) asm("_vkCmdEndTransformFeedbackEXT");
    VKAPI_ATTR void VKAPI_CALL BeginQueryIndexedEXT(this VkCommandBuffer_T& commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) asm("_vkCmdBeginQueryIndexedEXT");
    VKAPI_ATTR void VKAPI_CALL EndQueryIndexedEXT(this VkCommandBuffer_T& commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) asm("_vkCmdEndQueryIndexedEXT");
    VKAPI_ATTR void VKAPI_CALL DrawIndirectByteCountEXT(this VkCommandBuffer_T& commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride) asm("_vkCmdDrawIndirectByteCountEXT");
    VKAPI_ATTR void VKAPI_CALL CuLaunchKernelNVX(this VkCommandBuffer_T& commandBuffer, VkCuLaunchInfoNVX const* pLaunchInfo) asm("_vkCmdCuLaunchKernelNVX");
    VKAPI_ATTR void VKAPI_CALL DrawIndirectCountAMD(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawIndirectCountAMD");
    VKAPI_ATTR void VKAPI_CALL DrawIndexedIndirectCountAMD(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawIndexedIndirectCountAMD");
    VKAPI_ATTR void VKAPI_CALL BeginConditionalRenderingEXT(this VkCommandBuffer_T& commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditionalRenderingBegin) asm("_vkCmdBeginConditionalRenderingEXT");
    VKAPI_ATTR void VKAPI_CALL EndConditionalRenderingEXT(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdEndConditionalRenderingEXT");
    VKAPI_ATTR void VKAPI_CALL SetViewportWScalingNV(this VkCommandBuffer_T& commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewportWScalingNV const* pViewportWScalings) asm("_vkCmdSetViewportWScalingNV");
    VKAPI_ATTR void VKAPI_CALL SetDiscardRectangleEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, VkRect2D const* pDiscardRectangles) asm("_vkCmdSetDiscardRectangleEXT");
    VKAPI_ATTR void VKAPI_CALL SetDiscardRectangleEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 discardRectangleEnable) asm("_vkCmdSetDiscardRectangleEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetDiscardRectangleModeEXT(this VkCommandBuffer_T& commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) asm("_vkCmdSetDiscardRectangleModeEXT");
    VKAPI_ATTR void VKAPI_CALL BeginDebugUtilsLabelEXT(this VkCommandBuffer_T& commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo) asm("_vkCmdBeginDebugUtilsLabelEXT");
    VKAPI_ATTR void VKAPI_CALL EndDebugUtilsLabelEXT(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdEndDebugUtilsLabelEXT");
    VKAPI_ATTR void VKAPI_CALL InsertDebugUtilsLabelEXT(this VkCommandBuffer_T& commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo) asm("_vkCmdInsertDebugUtilsLabelEXT");
    VKAPI_ATTR void VKAPI_CALL SetSampleLocationsEXT(this VkCommandBuffer_T& commandBuffer, VkSampleLocationsInfoEXT const* pSampleLocationsInfo) asm("_vkCmdSetSampleLocationsEXT");
    VKAPI_ATTR void VKAPI_CALL BindShadingRateImageNV(this VkCommandBuffer_T& commandBuffer, VkImageView imageView, VkImageLayout imageLayout) asm("_vkCmdBindShadingRateImageNV");
    VKAPI_ATTR void VKAPI_CALL SetViewportShadingRatePaletteNV(this VkCommandBuffer_T& commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkShadingRatePaletteNV const* pShadingRatePalettes) asm("_vkCmdSetViewportShadingRatePaletteNV");
    VKAPI_ATTR void VKAPI_CALL SetCoarseSampleOrderNV(this VkCommandBuffer_T& commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, VkCoarseSampleOrderCustomNV const* pCustomSampleOrders) asm("_vkCmdSetCoarseSampleOrderNV");
    VKAPI_ATTR void VKAPI_CALL BuildAccelerationStructureNV(this VkCommandBuffer_T& commandBuffer, VkAccelerationStructureInfoNV const* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) asm("_vkCmdBuildAccelerationStructureNV");
    VKAPI_ATTR void VKAPI_CALL CopyAccelerationStructureNV(this VkCommandBuffer_T& commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode) asm("_vkCmdCopyAccelerationStructureNV");
    VKAPI_ATTR void VKAPI_CALL TraceRaysNV(this VkCommandBuffer_T& commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth) asm("_vkCmdTraceRaysNV");
    VKAPI_ATTR void VKAPI_CALL WriteAccelerationStructuresPropertiesNV(this VkCommandBuffer_T& commandBuffer, uint32_t accelerationStructureCount, VkAccelerationStructureNV const* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) asm("_vkCmdWriteAccelerationStructuresPropertiesNV");
    VKAPI_ATTR void VKAPI_CALL WriteBufferMarkerAMD(this VkCommandBuffer_T& commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) asm("_vkCmdWriteBufferMarkerAMD");
    VKAPI_ATTR void VKAPI_CALL DrawMeshTasksNV(this VkCommandBuffer_T& commandBuffer, uint32_t taskCount, uint32_t firstTask) asm("_vkCmdDrawMeshTasksNV");
    VKAPI_ATTR void VKAPI_CALL DrawMeshTasksIndirectNV(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) asm("_vkCmdDrawMeshTasksIndirectNV");
    VKAPI_ATTR void VKAPI_CALL DrawMeshTasksIndirectCountNV(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawMeshTasksIndirectCountNV");
    VKAPI_ATTR void VKAPI_CALL SetExclusiveScissorEnableNV(this VkCommandBuffer_T& commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, VkBool32 const* pExclusiveScissorEnables) asm("_vkCmdSetExclusiveScissorEnableNV");
    VKAPI_ATTR void VKAPI_CALL SetExclusiveScissorNV(this VkCommandBuffer_T& commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, VkRect2D const* pExclusiveScissors) asm("_vkCmdSetExclusiveScissorNV");
    VKAPI_ATTR void VKAPI_CALL SetCheckpointNV(this VkCommandBuffer_T& commandBuffer, void const* pCheckpointMarker) asm("_vkCmdSetCheckpointNV");
    VKAPI_ATTR auto VKAPI_CALL SetPerformanceMarkerINTEL(this VkCommandBuffer_T& commandBuffer, VkPerformanceMarkerInfoINTEL const* pMarkerInfo) -> VkResult asm("_vkCmdSetPerformanceMarkerINTEL");
    VKAPI_ATTR auto VKAPI_CALL SetPerformanceStreamMarkerINTEL(this VkCommandBuffer_T& commandBuffer, VkPerformanceStreamMarkerInfoINTEL const* pMarkerInfo) -> VkResult asm("_vkCmdSetPerformanceStreamMarkerINTEL");
    VKAPI_ATTR auto VKAPI_CALL SetPerformanceOverrideINTEL(this VkCommandBuffer_T& commandBuffer, VkPerformanceOverrideInfoINTEL const* pOverrideInfo) -> VkResult asm("_vkCmdSetPerformanceOverrideINTEL");
    VKAPI_ATTR void VKAPI_CALL SetLineStippleEXT(this VkCommandBuffer_T& commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) asm("_vkCmdSetLineStippleEXT");
    VKAPI_ATTR void VKAPI_CALL SetCullModeEXT(this VkCommandBuffer_T& commandBuffer, VkCullModeFlags cullMode) asm("_vkCmdSetCullModeEXT");
    VKAPI_ATTR void VKAPI_CALL SetFrontFaceEXT(this VkCommandBuffer_T& commandBuffer, VkFrontFace frontFace) asm("_vkCmdSetFrontFaceEXT");
    VKAPI_ATTR void VKAPI_CALL SetPrimitiveTopologyEXT(this VkCommandBuffer_T& commandBuffer, VkPrimitiveTopology primitiveTopology) asm("_vkCmdSetPrimitiveTopologyEXT");
    VKAPI_ATTR void VKAPI_CALL SetViewportWithCountEXT(this VkCommandBuffer_T& commandBuffer, uint32_t viewportCount, VkViewport const* pViewports) asm("_vkCmdSetViewportWithCountEXT");
    VKAPI_ATTR void VKAPI_CALL SetScissorWithCountEXT(this VkCommandBuffer_T& commandBuffer, uint32_t scissorCount, VkRect2D const* pScissors) asm("_vkCmdSetScissorWithCountEXT");
    VKAPI_ATTR void VKAPI_CALL BindVertexBuffers2EXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets, VkDeviceSize const* pSizes, VkDeviceSize const* pStrides) asm("_vkCmdBindVertexBuffers2EXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthTestEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 depthTestEnable) asm("_vkCmdSetDepthTestEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthWriteEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 depthWriteEnable) asm("_vkCmdSetDepthWriteEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthCompareOpEXT(this VkCommandBuffer_T& commandBuffer, VkCompareOp depthCompareOp) asm("_vkCmdSetDepthCompareOpEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthBoundsTestEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 depthBoundsTestEnable) asm("_vkCmdSetDepthBoundsTestEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetStencilTestEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 stencilTestEnable) asm("_vkCmdSetStencilTestEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetStencilOpEXT(this VkCommandBuffer_T& commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) asm("_vkCmdSetStencilOpEXT");
    VKAPI_ATTR void VKAPI_CALL PreprocessGeneratedCommandsNV(this VkCommandBuffer_T& commandBuffer, VkGeneratedCommandsInfoNV const* pGeneratedCommandsInfo) asm("_vkCmdPreprocessGeneratedCommandsNV");
    VKAPI_ATTR void VKAPI_CALL ExecuteGeneratedCommandsNV(this VkCommandBuffer_T& commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV const* pGeneratedCommandsInfo) asm("_vkCmdExecuteGeneratedCommandsNV");
    VKAPI_ATTR void VKAPI_CALL BindPipelineShaderGroupNV(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipeline pipeline, uint32_t groupIndex) asm("_vkCmdBindPipelineShaderGroupNV");
    VKAPI_ATTR void VKAPI_CALL SetDepthBias2EXT(this VkCommandBuffer_T& commandBuffer, VkDepthBiasInfoEXT const* pDepthBiasInfo) asm("_vkCmdSetDepthBias2EXT");
    VKAPI_ATTR void VKAPI_CALL BindDescriptorBuffersEXT(this VkCommandBuffer_T& commandBuffer, uint32_t bufferCount, VkDescriptorBufferBindingInfoEXT const* pBindingInfos) asm("_vkCmdBindDescriptorBuffersEXT");
    VKAPI_ATTR void VKAPI_CALL SetDescriptorBufferOffsetsEXT(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, uint32_t const* pBufferIndices, VkDeviceSize const* pOffsets) asm("_vkCmdSetDescriptorBufferOffsetsEXT");
    VKAPI_ATTR void VKAPI_CALL BindDescriptorBufferEmbeddedSamplersEXT(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipelineLayout layout, uint32_t set) asm("_vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
    VKAPI_ATTR void VKAPI_CALL SetVertexInputEXT(this VkCommandBuffer_T& commandBuffer, uint32_t vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT const* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT const* pVertexAttributeDescriptions) asm("_vkCmdSetVertexInputEXT");
    VKAPI_ATTR void VKAPI_CALL SubpassShadingHUAWEI(this VkCommandBuffer_T& commandBuffer) asm("_vkCmdSubpassShadingHUAWEI");
    VKAPI_ATTR void VKAPI_CALL BindInvocationMaskHUAWEI(this VkCommandBuffer_T& commandBuffer, VkImageView imageView, VkImageLayout imageLayout) asm("_vkCmdBindInvocationMaskHUAWEI");
    VKAPI_ATTR void VKAPI_CALL SetPatchControlPointsEXT(this VkCommandBuffer_T& commandBuffer, uint32_t patchControlPoints) asm("_vkCmdSetPatchControlPointsEXT");
    VKAPI_ATTR void VKAPI_CALL SetRasterizerDiscardEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 rasterizerDiscardEnable) asm("_vkCmdSetRasterizerDiscardEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthBiasEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 depthBiasEnable) asm("_vkCmdSetDepthBiasEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetLogicOpEXT(this VkCommandBuffer_T& commandBuffer, VkLogicOp logicOp) asm("_vkCmdSetLogicOpEXT");
    VKAPI_ATTR void VKAPI_CALL SetPrimitiveRestartEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 primitiveRestartEnable) asm("_vkCmdSetPrimitiveRestartEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetColorWriteEnableEXT(this VkCommandBuffer_T& commandBuffer, uint32_t attachmentCount, VkBool32 const* pColorWriteEnables) asm("_vkCmdSetColorWriteEnableEXT");
    VKAPI_ATTR void VKAPI_CALL DrawMultiEXT(this VkCommandBuffer_T& commandBuffer, uint32_t drawCount, VkMultiDrawInfoEXT const* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride) asm("_vkCmdDrawMultiEXT");
    VKAPI_ATTR void VKAPI_CALL DrawMultiIndexedEXT(this VkCommandBuffer_T& commandBuffer, uint32_t drawCount, VkMultiDrawIndexedInfoEXT const* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, int32_t const* pVertexOffset) asm("_vkCmdDrawMultiIndexedEXT");
    VKAPI_ATTR void VKAPI_CALL BuildMicromapsEXT(this VkCommandBuffer_T& commandBuffer, uint32_t infoCount, VkMicromapBuildInfoEXT const* pInfos) asm("_vkCmdBuildMicromapsEXT");
    VKAPI_ATTR void VKAPI_CALL CopyMicromapEXT(this VkCommandBuffer_T& commandBuffer, VkCopyMicromapInfoEXT const* pInfo) asm("_vkCmdCopyMicromapEXT");
    VKAPI_ATTR void VKAPI_CALL CopyMicromapToMemoryEXT(this VkCommandBuffer_T& commandBuffer, VkCopyMicromapToMemoryInfoEXT const* pInfo) asm("_vkCmdCopyMicromapToMemoryEXT");
    VKAPI_ATTR void VKAPI_CALL CopyMemoryToMicromapEXT(this VkCommandBuffer_T& commandBuffer, VkCopyMemoryToMicromapInfoEXT const* pInfo) asm("_vkCmdCopyMemoryToMicromapEXT");
    VKAPI_ATTR void VKAPI_CALL WriteMicromapsPropertiesEXT(this VkCommandBuffer_T& commandBuffer, uint32_t micromapCount, VkMicromapEXT const* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) asm("_vkCmdWriteMicromapsPropertiesEXT");
    VKAPI_ATTR void VKAPI_CALL DrawClusterHUAWEI(this VkCommandBuffer_T& commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) asm("_vkCmdDrawClusterHUAWEI");
    VKAPI_ATTR void VKAPI_CALL DrawClusterIndirectHUAWEI(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset) asm("_vkCmdDrawClusterIndirectHUAWEI");
    VKAPI_ATTR void VKAPI_CALL CopyMemoryIndirectNV(this VkCommandBuffer_T& commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride) asm("_vkCmdCopyMemoryIndirectNV");
    VKAPI_ATTR void VKAPI_CALL CopyMemoryToImageIndirectNV(this VkCommandBuffer_T& commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, VkImageSubresourceLayers const* pImageSubresources) asm("_vkCmdCopyMemoryToImageIndirectNV");
    VKAPI_ATTR void VKAPI_CALL DecompressMemoryNV(this VkCommandBuffer_T& commandBuffer, uint32_t decompressRegionCount, VkDecompressMemoryRegionNV const* pDecompressMemoryRegions) asm("_vkCmdDecompressMemoryNV");
    VKAPI_ATTR void VKAPI_CALL DecompressMemoryIndirectCountNV(this VkCommandBuffer_T& commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride) asm("_vkCmdDecompressMemoryIndirectCountNV");
    VKAPI_ATTR void VKAPI_CALL UpdatePipelineIndirectBufferNV(this VkCommandBuffer_T& commandBuffer, VkPipelineBindPoint pipeline_bind_point, VkPipeline pipeline) asm("_vkCmdUpdatePipelineIndirectBufferNV");
    VKAPI_ATTR void VKAPI_CALL SetTessellationDomainOriginEXT(this VkCommandBuffer_T& commandBuffer, VkTessellationDomainOrigin domainOrigin) asm("_vkCmdSetTessellationDomainOriginEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthClampEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 depthClampEnable) asm("_vkCmdSetDepthClampEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetPolygonModeEXT(this VkCommandBuffer_T& commandBuffer, VkPolygonMode polygonMode) asm("_vkCmdSetPolygonModeEXT");
    VKAPI_ATTR void VKAPI_CALL SetRasterizationSamplesEXT(this VkCommandBuffer_T& commandBuffer, VkSampleCountFlagBits rasterizationSamples) asm("_vkCmdSetRasterizationSamplesEXT");
    VKAPI_ATTR void VKAPI_CALL SetSampleMaskEXT(this VkCommandBuffer_T& commandBuffer, VkSampleCountFlagBits samples, VkSampleMask const* pSampleMask) asm("_vkCmdSetSampleMaskEXT");
    VKAPI_ATTR void VKAPI_CALL SetAlphaToCoverageEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 alphaToCoverageEnable) asm("_vkCmdSetAlphaToCoverageEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetAlphaToOneEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 alphaToOneEnable) asm("_vkCmdSetAlphaToOneEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetLogicOpEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 logicOpEnable) asm("_vkCmdSetLogicOpEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetColorBlendEnableEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkBool32 const* pColorBlendEnables) asm("_vkCmdSetColorBlendEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetColorBlendEquationEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorBlendEquationEXT const* pColorBlendEquations) asm("_vkCmdSetColorBlendEquationEXT");
    VKAPI_ATTR void VKAPI_CALL SetColorWriteMaskEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorComponentFlags const* pColorWriteMasks) asm("_vkCmdSetColorWriteMaskEXT");
    VKAPI_ATTR void VKAPI_CALL SetRasterizationStreamEXT(this VkCommandBuffer_T& commandBuffer, uint32_t rasterizationStream) asm("_vkCmdSetRasterizationStreamEXT");
    VKAPI_ATTR void VKAPI_CALL SetConservativeRasterizationModeEXT(this VkCommandBuffer_T& commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) asm("_vkCmdSetConservativeRasterizationModeEXT");
    VKAPI_ATTR void VKAPI_CALL SetExtraPrimitiveOverestimationSizeEXT(this VkCommandBuffer_T& commandBuffer, float extraPrimitiveOverestimationSize) asm("_vkCmdSetExtraPrimitiveOverestimationSizeEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthClipEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 depthClipEnable) asm("_vkCmdSetDepthClipEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetSampleLocationsEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 sampleLocationsEnable) asm("_vkCmdSetSampleLocationsEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetColorBlendAdvancedEXT(this VkCommandBuffer_T& commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, VkColorBlendAdvancedEXT const* pColorBlendAdvanced) asm("_vkCmdSetColorBlendAdvancedEXT");
    VKAPI_ATTR void VKAPI_CALL SetProvokingVertexModeEXT(this VkCommandBuffer_T& commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) asm("_vkCmdSetProvokingVertexModeEXT");
    VKAPI_ATTR void VKAPI_CALL SetLineRasterizationModeEXT(this VkCommandBuffer_T& commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) asm("_vkCmdSetLineRasterizationModeEXT");
    VKAPI_ATTR void VKAPI_CALL SetLineStippleEnableEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 stippledLineEnable) asm("_vkCmdSetLineStippleEnableEXT");
    VKAPI_ATTR void VKAPI_CALL SetDepthClipNegativeOneToOneEXT(this VkCommandBuffer_T& commandBuffer, VkBool32 negativeOneToOne) asm("_vkCmdSetDepthClipNegativeOneToOneEXT");
    VKAPI_ATTR void VKAPI_CALL SetViewportWScalingEnableNV(this VkCommandBuffer_T& commandBuffer, VkBool32 viewportWScalingEnable) asm("_vkCmdSetViewportWScalingEnableNV");
    VKAPI_ATTR void VKAPI_CALL SetViewportSwizzleNV(this VkCommandBuffer_T& commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewportSwizzleNV const* pViewportSwizzles) asm("_vkCmdSetViewportSwizzleNV");
    VKAPI_ATTR void VKAPI_CALL SetCoverageToColorEnableNV(this VkCommandBuffer_T& commandBuffer, VkBool32 coverageToColorEnable) asm("_vkCmdSetCoverageToColorEnableNV");
    VKAPI_ATTR void VKAPI_CALL SetCoverageToColorLocationNV(this VkCommandBuffer_T& commandBuffer, uint32_t coverageToColorLocation) asm("_vkCmdSetCoverageToColorLocationNV");
    VKAPI_ATTR void VKAPI_CALL SetCoverageModulationModeNV(this VkCommandBuffer_T& commandBuffer, VkCoverageModulationModeNV coverageModulationMode) asm("_vkCmdSetCoverageModulationModeNV");
    VKAPI_ATTR void VKAPI_CALL SetCoverageModulationTableEnableNV(this VkCommandBuffer_T& commandBuffer, VkBool32 coverageModulationTableEnable) asm("_vkCmdSetCoverageModulationTableEnableNV");
    VKAPI_ATTR void VKAPI_CALL SetCoverageModulationTableNV(this VkCommandBuffer_T& commandBuffer, uint32_t coverageModulationTableCount, float const* pCoverageModulationTable) asm("_vkCmdSetCoverageModulationTableNV");
    VKAPI_ATTR void VKAPI_CALL SetShadingRateImageEnableNV(this VkCommandBuffer_T& commandBuffer, VkBool32 shadingRateImageEnable) asm("_vkCmdSetShadingRateImageEnableNV");
    VKAPI_ATTR void VKAPI_CALL SetRepresentativeFragmentTestEnableNV(this VkCommandBuffer_T& commandBuffer, VkBool32 representativeFragmentTestEnable) asm("_vkCmdSetRepresentativeFragmentTestEnableNV");
    VKAPI_ATTR void VKAPI_CALL SetCoverageReductionModeNV(this VkCommandBuffer_T& commandBuffer, VkCoverageReductionModeNV coverageReductionMode) asm("_vkCmdSetCoverageReductionModeNV");
    VKAPI_ATTR void VKAPI_CALL OpticalFlowExecuteNV(this VkCommandBuffer_T& commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV const* pExecuteInfo) asm("_vkCmdOpticalFlowExecuteNV");
    VKAPI_ATTR void VKAPI_CALL BindShadersEXT(this VkCommandBuffer_T& commandBuffer, uint32_t stageCount, VkShaderStageFlagBits const* pStages, VkShaderEXT const* pShaders) asm("_vkCmdBindShadersEXT");
    VKAPI_ATTR void VKAPI_CALL SetAttachmentFeedbackLoopEnableEXT(this VkCommandBuffer_T& commandBuffer, VkImageAspectFlags aspectMask) asm("_vkCmdSetAttachmentFeedbackLoopEnableEXT");
    VKAPI_ATTR void VKAPI_CALL BuildAccelerationStructuresKHR(this VkCommandBuffer_T& commandBuffer, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR const* pInfos, VkAccelerationStructureBuildRangeInfoKHR const* const* ppBuildRangeInfos) asm("_vkCmdBuildAccelerationStructuresKHR");
    VKAPI_ATTR void VKAPI_CALL BuildAccelerationStructuresIndirectKHR(this VkCommandBuffer_T& commandBuffer, uint32_t infoCount, VkAccelerationStructureBuildGeometryInfoKHR const* pInfos, VkDeviceAddress const* pIndirectDeviceAddresses, uint32_t const* pIndirectStrides, uint32_t const* const* ppMaxPrimitiveCounts) asm("_vkCmdBuildAccelerationStructuresIndirectKHR");
    VKAPI_ATTR void VKAPI_CALL CopyAccelerationStructureKHR(this VkCommandBuffer_T& commandBuffer, VkCopyAccelerationStructureInfoKHR const* pInfo) asm("_vkCmdCopyAccelerationStructureKHR");
    VKAPI_ATTR void VKAPI_CALL CopyAccelerationStructureToMemoryKHR(this VkCommandBuffer_T& commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR const* pInfo) asm("_vkCmdCopyAccelerationStructureToMemoryKHR");
    VKAPI_ATTR void VKAPI_CALL CopyMemoryToAccelerationStructureKHR(this VkCommandBuffer_T& commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR const* pInfo) asm("_vkCmdCopyMemoryToAccelerationStructureKHR");
    VKAPI_ATTR void VKAPI_CALL WriteAccelerationStructuresPropertiesKHR(this VkCommandBuffer_T& commandBuffer, uint32_t accelerationStructureCount, VkAccelerationStructureKHR const* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) asm("_vkCmdWriteAccelerationStructuresPropertiesKHR");
    VKAPI_ATTR void VKAPI_CALL TraceRaysKHR(this VkCommandBuffer_T& commandBuffer, VkStridedDeviceAddressRegionKHR const* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR const* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR const* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR const* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth) asm("_vkCmdTraceRaysKHR");
    VKAPI_ATTR void VKAPI_CALL TraceRaysIndirectKHR(this VkCommandBuffer_T& commandBuffer, VkStridedDeviceAddressRegionKHR const* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR const* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR const* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR const* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) asm("_vkCmdTraceRaysIndirectKHR");
    VKAPI_ATTR void VKAPI_CALL SetRayTracingPipelineStackSizeKHR(this VkCommandBuffer_T& commandBuffer, uint32_t pipelineStackSize) asm("_vkCmdSetRayTracingPipelineStackSizeKHR");
    VKAPI_ATTR void VKAPI_CALL DrawMeshTasksEXT(this VkCommandBuffer_T& commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) asm("_vkCmdDrawMeshTasksEXT");
    VKAPI_ATTR void VKAPI_CALL DrawMeshTasksIndirectEXT(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) asm("_vkCmdDrawMeshTasksIndirectEXT");
    VKAPI_ATTR void VKAPI_CALL DrawMeshTasksIndirectCountEXT(this VkCommandBuffer_T& commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) asm("_vkCmdDrawMeshTasksIndirectCountEXT");
};
struct VkPhysicalDevice_T {
    VkPhysicalDevice_T() = delete;
    ~VkPhysicalDevice_T() = delete;

    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceFeatures* pFeatures) asm("_vkGetPhysicalDeviceFeatures");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties(this VkPhysicalDevice_T& physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) asm("_vkGetPhysicalDeviceFormatProperties");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceImageFormatProperties(this VkPhysicalDevice_T& physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) -> VkResult asm("_vkGetPhysicalDeviceImageFormatProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceProperties* pProperties) asm("_vkGetPhysicalDeviceProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties(this VkPhysicalDevice_T& physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) asm("_vkGetPhysicalDeviceQueueFamilyProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) asm("_vkGetPhysicalDeviceMemoryProperties");
    VKAPI_ATTR auto VKAPI_CALL CreateDevice(this VkPhysicalDevice_T& physicalDevice, VkDeviceCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDevice* pDevice) -> VkResult asm("_vkCreateDevice");
    VKAPI_ATTR auto VKAPI_CALL EnumerateDeviceExtensionProperties(this VkPhysicalDevice_T& physicalDevice, char const* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) -> VkResult asm("_vkEnumerateDeviceExtensionProperties");
    VKAPI_ATTR auto VKAPI_CALL EnumerateDeviceLayerProperties(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) -> VkResult asm("_vkEnumerateDeviceLayerProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties(this VkPhysicalDevice_T& physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) asm("_vkGetPhysicalDeviceSparseImageFormatProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures2(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) asm("_vkGetPhysicalDeviceFeatures2");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties2(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceProperties2* pProperties) asm("_vkGetPhysicalDeviceProperties2");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties2(this VkPhysicalDevice_T& physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) asm("_vkGetPhysicalDeviceFormatProperties2");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceImageFormatProperties2(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceImageFormatInfo2 const* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) -> VkResult asm("_vkGetPhysicalDeviceImageFormatProperties2");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties2(this VkPhysicalDevice_T& physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) asm("_vkGetPhysicalDeviceQueueFamilyProperties2");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties2(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) asm("_vkGetPhysicalDeviceMemoryProperties2");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties2(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2 const* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) asm("_vkGetPhysicalDeviceSparseImageFormatProperties2");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalBufferProperties(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceExternalBufferInfo const* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) asm("_vkGetPhysicalDeviceExternalBufferProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalFenceProperties(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceExternalFenceInfo const* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) asm("_vkGetPhysicalDeviceExternalFenceProperties");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalSemaphoreProperties(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo const* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) asm("_vkGetPhysicalDeviceExternalSemaphoreProperties");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceToolProperties(this VkPhysicalDevice_T& physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) -> VkResult asm("_vkGetPhysicalDeviceToolProperties");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfaceSupportKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) -> VkResult asm("_vkGetPhysicalDeviceSurfaceSupportKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfaceCapabilitiesKHR(this VkPhysicalDevice_T& physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) -> VkResult asm("_vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfaceFormatsKHR(this VkPhysicalDevice_T& physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) -> VkResult asm("_vkGetPhysicalDeviceSurfaceFormatsKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfacePresentModesKHR(this VkPhysicalDevice_T& physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) -> VkResult asm("_vkGetPhysicalDeviceSurfacePresentModesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDevicePresentRectanglesKHR(this VkPhysicalDevice_T& physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects) -> VkResult asm("_vkGetPhysicalDevicePresentRectanglesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceDisplayPropertiesKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) -> VkResult asm("_vkGetPhysicalDeviceDisplayPropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceDisplayPlanePropertiesKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) -> VkResult asm("_vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDisplayPlaneSupportedDisplaysKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) -> VkResult asm("_vkGetDisplayPlaneSupportedDisplaysKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDisplayModePropertiesKHR(this VkPhysicalDevice_T& physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) -> VkResult asm("_vkGetDisplayModePropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL CreateDisplayModeKHR(this VkPhysicalDevice_T& physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDisplayModeKHR* pMode) -> VkResult asm("_vkCreateDisplayModeKHR");
    VKAPI_ATTR auto VKAPI_CALL GetDisplayPlaneCapabilitiesKHR(this VkPhysicalDevice_T& physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) -> VkResult asm("_vkGetDisplayPlaneCapabilitiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceVideoCapabilitiesKHR(this VkPhysicalDevice_T& physicalDevice, VkVideoProfileInfoKHR const* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities) -> VkResult asm("_vkGetPhysicalDeviceVideoCapabilitiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceVideoFormatPropertiesKHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR const* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties) -> VkResult asm("_vkGetPhysicalDeviceVideoFormatPropertiesKHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFeatures2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) asm("_vkGetPhysicalDeviceFeatures2KHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceProperties2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceProperties2* pProperties) asm("_vkGetPhysicalDeviceProperties2KHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceFormatProperties2KHR(this VkPhysicalDevice_T& physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) asm("_vkGetPhysicalDeviceFormatProperties2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceImageFormatProperties2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceImageFormatInfo2 const* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) -> VkResult asm("_vkGetPhysicalDeviceImageFormatProperties2KHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyProperties2KHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) asm("_vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMemoryProperties2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) asm("_vkGetPhysicalDeviceMemoryProperties2KHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceSparseImageFormatProperties2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2 const* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) asm("_vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalBufferPropertiesKHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceExternalBufferInfo const* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) asm("_vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalSemaphorePropertiesKHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo const* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) asm("_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceExternalFencePropertiesKHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceExternalFenceInfo const* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) asm("_vkGetPhysicalDeviceExternalFencePropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions) -> VkResult asm("_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(this VkPhysicalDevice_T& physicalDevice, VkQueryPoolPerformanceCreateInfoKHR const* pPerformanceQueryCreateInfo, uint32_t* pNumPasses) asm("_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfaceCapabilities2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR const* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) -> VkResult asm("_vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfaceFormats2KHR(this VkPhysicalDevice_T& physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR const* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) -> VkResult asm("_vkGetPhysicalDeviceSurfaceFormats2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceDisplayProperties2KHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties) -> VkResult asm("_vkGetPhysicalDeviceDisplayProperties2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceDisplayPlaneProperties2KHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) -> VkResult asm("_vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetDisplayModeProperties2KHR(this VkPhysicalDevice_T& physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) -> VkResult asm("_vkGetDisplayModeProperties2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetDisplayPlaneCapabilities2KHR(this VkPhysicalDevice_T& physicalDevice, VkDisplayPlaneInfo2KHR const* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) -> VkResult asm("_vkGetDisplayPlaneCapabilities2KHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceFragmentShadingRatesKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates) -> VkResult asm("_vkGetPhysicalDeviceFragmentShadingRatesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceCooperativeMatrixPropertiesKHR(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties) -> VkResult asm("_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceExternalImageFormatPropertiesNV(this VkPhysicalDevice_T& physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) -> VkResult asm("_vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    VKAPI_ATTR auto VKAPI_CALL ReleaseDisplayEXT(this VkPhysicalDevice_T& physicalDevice, VkDisplayKHR display) -> VkResult asm("_vkReleaseDisplayEXT");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSurfaceCapabilities2EXT(this VkPhysicalDevice_T& physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) -> VkResult asm("_vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    VKAPI_ATTR void VKAPI_CALL GetPhysicalDeviceMultisamplePropertiesEXT(this VkPhysicalDevice_T& physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) asm("_vkGetPhysicalDeviceMultisamplePropertiesEXT");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceCalibrateableTimeDomainsEXT(this VkPhysicalDevice_T& physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) -> VkResult asm("_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceToolPropertiesEXT(this VkPhysicalDevice_T& physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) -> VkResult asm("_vkGetPhysicalDeviceToolPropertiesEXT");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceCooperativeMatrixPropertiesNV(this VkPhysicalDevice_T& physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) -> VkResult asm("_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(this VkPhysicalDevice_T& physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) -> VkResult asm("_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
    VKAPI_ATTR auto VKAPI_CALL AcquireDrmDisplayEXT(this VkPhysicalDevice_T& physicalDevice, int32_t drmFd, VkDisplayKHR display) -> VkResult asm("_vkAcquireDrmDisplayEXT");
    VKAPI_ATTR auto VKAPI_CALL GetDrmDisplayEXT(this VkPhysicalDevice_T& physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display) -> VkResult asm("_vkGetDrmDisplayEXT");
    VKAPI_ATTR auto VKAPI_CALL GetPhysicalDeviceOpticalFlowImageFormatsNV(this VkPhysicalDevice_T& physicalDevice, VkOpticalFlowImageFormatInfoNV const* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties) -> VkResult asm("_vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
};

namespace vkh {
    VKAPI_ATTR auto VKAPI_CALL CreateInstance(VkInstanceCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkInstance* pInstance) -> VkResult asm("_vkCreateInstance");
    VKAPI_ATTR auto VKAPI_CALL EnumerateInstanceExtensionProperties(char const* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) -> VkResult asm("_vkEnumerateInstanceExtensionProperties");
    VKAPI_ATTR auto VKAPI_CALL EnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties) -> VkResult asm("_vkEnumerateInstanceLayerProperties");
    VKAPI_ATTR auto VKAPI_CALL EnumerateInstanceVersion(uint32_t* pApiVersion) -> VkResult asm("_vkEnumerateInstanceVersion");
}
